{
    "0": {
        "student_solution": "discount  = float(input())\nmoney = int(input())\n\n#ваш код ниже\n\nprint('Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')",
        "task": "Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: \n\nВ переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "discount, money = map(float, input().split(';'))\nmoney = int(money)\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидкой стоимость составит {money- (money * discount)} тыс. руб.')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n0.1; 500\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\22\\codefile.py\", line 3, in <module>\n    discount  = float(input())\nValueError: could not convert string to float: ''\n\n"
    },
    "1": {
        "student_solution": "discount  = float(input())\nmoney = int(input())\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.)",
        "task": "Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: \n\nВ переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "discount, money = map(float, input().split(';'))\nmoney = int(money)\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидкой стоимость составит {money- (money * discount)} тыс. руб.')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\22\\codefile.py\", line 8\n    print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.)\n                                                                                                                                                                                                                       ^\nSyntaxError: EOL while scanning string literal\n"
    },
    "2": {
        "student_solution": "discount  = float(input())\nmoney = int(input())\n\n#ваш код ниже\n\nprint(fРеализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')",
        "task": "Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: \n\nВ переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "discount, money = map(float, input().split(';'))\nmoney = int(money)\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидкой стоимость составит {money- (money * discount)} тыс. руб.')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\22\\codefile.py\", line 8\n    print(fРеализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')\n                                ^\nSyntaxError: invalid syntax\n"
    },
    "3": {
        "student_solution": "discount  = float(input())\nmoney = int(input())\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {discount} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')",
        "task": "Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: \n\nВ переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "discount, money = map(float, input().split(';'))\nmoney = int(money)\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидкой стоимость составит {money- (money * discount)} тыс. руб.')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n0.1; 500\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\22\\codefile.py\", line 3, in <module>\n    discount  = float(input())\nValueError: could not convert string to float: ''\n\n"
    },
    "4": {
        "student_solution": "discount  = float(input())\nmoney = int(input())\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money * discount} тыс. руб.')",
        "task": "Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: \n\nВ переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "discount, money = map(float, input().split(';'))\nmoney = int(money)\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидкой стоимость составит {money- (money * discount)} тыс. руб.')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n0.1; 500\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\22\\codefile.py\", line 3, in <module>\n    discount  = float(input())\nValueError: could not convert string to float: ''\n\n"
    },
    "5": {
        "student_solution": "discount  = float(input())\nmoney = int(input())\n\n#ваш код ниже\n\nprint(f\"Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')",
        "task": "Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: \n\nВ переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "discount, money = map(float, input().split(';'))\nmoney = int(money)\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидкой стоимость составит {money- (money * discount)} тыс. руб.')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\22\\codefile.py\", line 8\n    print(f\"Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')\n                                                                                                                                                                                                                        ^\nSyntaxError: EOL while scanning string literal\n"
    },
    "6": {
        "student_solution": "discount  = float(input())\nmoney = int(input())\n\n#ваш код ниже\n\nprint('Реализация проекта будет стоить 500 тыс. руб. без скидки. Со скидкой стоимость составит 450.0 тыс. руб.')",
        "task": "Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: \n\nВ переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "discount, money = map(float, input().split(';'))\nmoney = int(money)\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидкой стоимость составит {money- (money * discount)} тыс. руб.')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n0.1; 500\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\22\\codefile.py\", line 3, in <module>\n    discount  = float(input())\nValueError: could not convert string to float: ''\n\n"
    },
    "7": {
        "student_solution": "discount  = float(input())\nmoney = int(input())\n\n#ваш код ниже\n\n    print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')",
        "task": "Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: \n\nВ переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "discount, money = map(float, input().split(';'))\nmoney = int(money)\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидкой стоимость составит {money- (money * discount)} тыс. руб.')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n0.1; 500\nЛог:\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\22\\codefile.py\", line 8\n    print(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.')\nIndentationError: unexpected indent\n\n"
    },
    "8": {
        "student_solution": "discount  = float(input())\nmoney = int(input())\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.'",
        "task": "Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: \n\nВ переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "discount, money = map(float, input().split(';'))\nmoney = int(money)\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидкой стоимость составит {money- (money * discount)} тыс. руб.')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\22\\codefile.py\", line 9\n    \n    ^\nSyntaxError: unexpected EOF while parsing\n"
    },
    "9": {
        "student_solution": "discount  = float(input())\nmoney = int(input())\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить money тыс. руб. без скидки. Со скидой стоимость составит money- (money * discount) тыс. руб.')",
        "task": "Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: \n\nВ переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "discount, money = map(float, input().split(';'))\nmoney = int(money)\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидкой стоимость составит {money- (money * discount)} тыс. руб.')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n0.1; 500\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\22\\codefile.py\", line 3, in <module>\n    discount  = float(input())\nValueError: could not convert string to float: ''\n\n"
    },
    "10": {
        "student_solution": "discount  = int(input())\nmoney = int(input())\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.'",
        "task": "Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: \n\nВ переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "discount, money = map(float, input().split(';'))\nmoney = int(money)\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидкой стоимость составит {money- (money * discount)} тыс. руб.')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\22\\codefile.py\", line 9\n    \n    ^\nSyntaxError: unexpected EOF while parsing\n"
    },
    "11": {
        "student_solution": "discount  = float(input())\nmoney = int(input())\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * int(discount))} тыс. руб.'",
        "task": "Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: \n\nВ переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "discount, money = map(float, input().split(';'))\nmoney = int(money)\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидкой стоимость составит {money- (money * discount)} тыс. руб.')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\22\\codefile.py\", line 9\n    \n    ^\nSyntaxError: unexpected EOF while parsing\n"
    },
    "12": {
        "student_solution": "discount  = float(input())\nmoney = int(input())\n\n#ваш код ниже\n\nPrint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидой стоимость составит {money- (money * discount)} тыс. руб.'",
        "task": "Реализуйте программу, которая напечатает стоимость реализации проекта со скидкой: \n\nВ переменную dicount считывается размер скидки на реализацию проекта (вещественное число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. без скидки. Со скидой стоимость составит <стоимость с учетом скидки> тыс. руб.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "discount, money = map(float, input().split(';'))\nmoney = int(money)\n\n#ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. без скидки. Со скидкой стоимость составит {money- (money * discount)} тыс. руб.')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\22\\codefile.py\", line 9\n    \n    ^\nSyntaxError: unexpected EOF while parsing\n"
    },
    "60": {
        "student_solution": "allowed_colors = input().split(', ')\nfavorite_colors =input().split(', ')\nused_colors = input().split(', ')\n\nprint(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nУмеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\23\\codefile.py\", line 7, in <module>\n    favorite_colors =input().split(', ')\nEOFError: EOF when reading a line\n\n"
    },
    "61": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nans = allowed_colors & used_colors & favorite_colors\n\nprint(ans, sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nУмеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\23\\codefile.py\", line 7, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "62": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nans = allowed_colors & used_colors & favorite_colors\n\nprint(*ans, sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nУмеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\23\\codefile.py\", line 7, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "63": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nУмеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\23\\codefile.py\", line 7, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "64": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = ';', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nУмеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\23\\codefile.py\", line 7, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "65": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors - used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nУмеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\23\\codefile.py\", line 7, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "66": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors - used_colors - favorite_colors, reverse = False), sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nУмеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\23\\codefile.py\", line 7, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "67": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & used_colors - favorite_colors, reverse = False), sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nУмеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\23\\codefile.py\", line 7, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "68": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & used_colors), reverse = False), sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\23\\codefile.py\", line 10\n    print(*sorted(allowed_colors & used_colors), reverse = False), sep = '; ', end = '!')\n    ^\nSyntaxError: cannot assign to function call\n"
    },
    "69": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nУмеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\23\\codefile.py\", line 7, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "70": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowedcolors & usedcolors & favoritecolors, reverse = False), sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nУмеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\23\\codefile.py\", line 7, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "71": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors and used_colors and favorite_colors, reverse = False), sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nУмеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\23\\codefile.py\", line 7, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "72": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors + used_colors + favorite_colors, reverse = False), sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nУмеренный синий, Серый, Желтый, Гранитный Спаржа, Фиалковый, Темно-розовый, Пурпурный, Алый, Фисташковый\nЖелтый, Пурпурный, Черный, Серый\nСерый, Желтый, Спаржа, Пурпурный, Темно-розовый, Серый, Алый, Фисташковый, Бежевый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\23\\codefile.py\", line 7, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "73": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios:\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "task": "Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в алфавитном порядке.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nкабинет\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\24\\codefile.py\", line 28, in <module>\n    for key, value in studios:\nValueError: too many values to unpack (expected 2)\n\n"
    },
    "74": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value:\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "task": "Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в алфавитном порядке.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nкабинет\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\24\\codefile.py\", line 29, in <module>\n    for k, v in value:\nValueError: too many values to unpack (expected 2)\n\n"
    },
    "75": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in k:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "task": "Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в алфавитном порядке.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nБританика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал\nОтвет решения:\n\n\n"
    },
    "76": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in key.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "task": "Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в алфавитном порядке.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nкабинет\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\24\\codefile.py\", line 29, in <module>\n    for k, v in key.items():\nAttributeError: 'str' object has no attribute 'items'\n\n"
    },
    "77": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "task": "Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в алфавитном порядке.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nБританика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал\nОтвет решения:\n\n\n"
    },
    "78": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.add(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "task": "Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в алфавитном порядке.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nкабинет\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\24\\codefile.py\", line 31, in <module>\n    residences.add(k)\nAttributeError: 'list' object has no attribute 'add'\n\n"
    },
    "79": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(set(residences))",
        "task": "Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в алфавитном порядке.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nБританика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал\nОтвет решения:\n{'Гринфилд', 'Монтевиль', 'Сканди-парк', 'Риверсайд', 'Театральный квартал', 'Британика'}\n\n"
    },
    "80": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*set(residences), sep='/')",
        "task": "Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в алфавитном порядке.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nБританика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал\nОтвет решения:\nТеатральный квартал/Сканди-парк/Монтевиль/Британика/Риверсайд/Гринфилд\n\n"
    },
    "81": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)))",
        "task": "Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в алфавитном порядке.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nБританика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал\nОтвет решения:\nБританика Гринфилд Монтевиль Риверсайд Сканди-парк Театральный квартал\n\n"
    },
    "82": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(residences), sep='/')",
        "task": "Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в алфавитном порядке.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nБританика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал\nОтвет решения:\nБританика/Британика/Британика/Гринфилд/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал\n\n"
    },
    "83": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(room)",
        "task": "Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в алфавитном порядке.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nБританика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал\nОтвет решения:\n\n\n"
    },
    "84": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(room)\n    \nprint(*sorted(set(residences)), sep='/')",
        "task": "Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в алфавитном порядке.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nБританика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал\nОтвет решения:\n\n\n"
    },
    "85": {
        "student_solution": "room = input()\n\nresidences = ()\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "task": "Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в алфавитном порядке.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nкабинет\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\24\\codefile.py\", line 31, in <module>\n    residences.append(k)\nAttributeError: 'tuple' object has no attribute 'append'\n\n"
    },
    "86": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \n    print(*sorted(set(residences)), sep='/')",
        "task": "Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в алфавитном порядке.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nБританика/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал\nОтвет решения:\nБританика/Сканди-парк\nБританика/Гринфилд/Сканди-парк/Театральный квартал\nБританика/Гринфилд/Риверсайд/Сканди-парк/Театральный квартал\nБританика/Гринфилд/Монтевиль/Риверсайд/Сканди-парк/Театральный квартал\n\n"
    },
    "87": {
        "student_solution": "room = input()\n\nresidences = ()\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n        residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "task": "Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в алфавитном порядке.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nкабинет\nЛог:\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\24\\codefile.py\", line 31\n    residences.append(k)\n    ^\nIndentationError: expected an indented block\n\n"
    },
    "88": {
        "student_solution": "room = input()\n\nresidences = ()\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "task": "Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в алфавитном порядке.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\24\\codefile.py\", line 30\n    if room not in v\n                    ^\nSyntaxError: invalid syntax\n"
    },
    "89": {
        "student_solution": "room = input()\n\nresidences = ()\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in value:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "task": "Реализуйте программу, которая определит названия поселков, где студии дизайна занимались интерьером определенного помещения:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии не занимались дизайном интерьера введенного помещения  и напечатайте уникальные названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в алфавитном порядке.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(set(residences)), sep='/')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nкабинет\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\24\\codefile.py\", line 31, in <module>\n    residences.append(k)\nAttributeError: 'tuple' object has no attribute 'append'\n\n"
    },
    "197": {
        "student_solution": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nprint('Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",
        "task": "Реализуйте программу, которая напечатает стоимость и срок реализации проекта: \n\nВ переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n10\n500\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\25\\codefile.py\", line 4, in <module>\n    duration  = int(input())\nValueError: invalid literal for int() with base 10: ''\n\n"
    },
    "198": {
        "student_solution": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.)",
        "task": "Реализуйте программу, которая напечатает стоимость и срок реализации проекта: \n\nВ переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\25\\codefile.py\", line 9\n    print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.)\n                                                                                                                                                                      ^\nSyntaxError: EOL while scanning string literal\n"
    },
    "199": {
        "student_solution": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nprint(fРеализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",
        "task": "Реализуйте программу, которая напечатает стоимость и срок реализации проекта: \n\nВ переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\25\\codefile.py\", line 9\n    print(fРеализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')\n                                ^\nSyntaxError: invalid syntax\n"
    },
    "200": {
        "student_solution": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nprint('Реализация проекта будет стоить 500 тыс. руб. Срок реализации проекта 10 недель.')",
        "task": "Реализуйте программу, которая напечатает стоимость и срок реализации проекта: \n\nВ переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n10\n500\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\25\\codefile.py\", line 4, in <module>\n    duration  = int(input())\nValueError: invalid literal for int() with base 10: ''\n\n"
    },
    "201": {
        "student_solution": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\n    print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",
        "task": "Реализуйте программу, которая напечатает стоимость и срок реализации проекта: \n\nВ переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n10\n500\nЛог:\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\25\\codefile.py\", line 9\n    print(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')\nIndentationError: unexpected indent\n\n"
    },
    "202": {
        "student_solution": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nprint(f'Реализация проекта будет стоить money тыс. руб. Срок реализации проекта duration недель.')",
        "task": "Реализуйте программу, которая напечатает стоимость и срок реализации проекта: \n\nВ переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n10\n500\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\25\\codefile.py\", line 4, in <module>\n    duration  = int(input())\nValueError: invalid literal for int() with base 10: ''\n\n"
    },
    "203": {
        "student_solution": "duration  = int(input())\nmoney = input()\n\n# ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",
        "task": "Реализуйте программу, которая напечатает стоимость и срок реализации проекта: \n\nВ переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n10\n500\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\25\\codefile.py\", line 4, in <module>\n    duration  = int(input())\nValueError: invalid literal for int() with base 10: ''\n\n"
    },
    "204": {
        "student_solution": "duration  = input()\nmoney = int(input())\n\n# ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",
        "task": "Реализуйте программу, которая напечатает стоимость и срок реализации проекта: \n\nВ переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n10\n500\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\25\\codefile.py\", line 5, in <module>\n    money = int(input())\nEOFError: EOF when reading a line\n\n"
    },
    "205": {
        "student_solution": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nprint(f'Реализация проекта будет стоить {duration} тыс. руб. Срок реализации проекта {money} недель.')",
        "task": "Реализуйте программу, которая напечатает стоимость и срок реализации проекта: \n\nВ переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n10\n500\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\25\\codefile.py\", line 4, in <module>\n    duration  = int(input())\nValueError: invalid literal for int() with base 10: ''\n\n"
    },
    "206": {
        "student_solution": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nPrint(f'Реализация проекта будет стоить {duration} тыс. руб. Срок реализации проекта {money} недель.')",
        "task": "Реализуйте программу, которая напечатает стоимость и срок реализации проекта: \n\nВ переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n10\n500\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\25\\codefile.py\", line 4, in <module>\n    duration  = int(input())\nValueError: invalid literal for int() with base 10: ''\n\n"
    },
    "207": {
        "student_solution": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nPrint(f'Реализация проекта будет стоить {time} тыс. руб. Срок реализации проекта {money} недель.')",
        "task": "Реализуйте программу, которая напечатает стоимость и срок реализации проекта: \n\nВ переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "duration  = int(input())\nmoney = int(input())\n\n# ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n10\n500\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\25\\codefile.py\", line 4, in <module>\n    duration  = int(input())\nValueError: invalid literal for int() with base 10: ''\n\n"
    },
    "208": {
        "student_solution": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = int(input())\n\nif color not in logo_project and color in cite_project:\n    print(True)\nelse:\n    print(False)",
        "task": "Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:\n\nДаны два списка logo_project и cite_project с кодами используемых цветов (строки).\nВ переменную color считывается код цвета (строка). Этот код уже написан.\nПрограмма должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. \nВ остальных случаях программа печатает False. ",
        "correct_example": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color in cite_project:\n    print(True)\nelse:\n    print(False)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n#ccb1e6\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\26\\codefile.py\", line 8, in <module>\n    color = int(input())\nValueError: invalid literal for int() with base 10: ''\n\n"
    },
    "209": {
        "student_solution": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color in logo_project and color in cite_project:\n    print(True)\nelse:\n    print(False)",
        "task": "Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:\n\nДаны два списка logo_project и cite_project с кодами используемых цветов (строки).\nВ переменную color считывается код цвета (строка). Этот код уже написан.\nПрограмма должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. \nВ остальных случаях программа печатает False. ",
        "correct_example": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color in cite_project:\n    print(True)\nelse:\n    print(False)",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n#ccb1e6\nОжидаемый ответ:\nTrue\nОтвет решения:\nFalse\n\n"
    },
    "210": {
        "student_solution": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color not in cite_project:\n    print(True)\nelse:\n    print(False)",
        "task": "Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:\n\nДаны два списка logo_project и cite_project с кодами используемых цветов (строки).\nВ переменную color считывается код цвета (строка). Этот код уже написан.\nПрограмма должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. \nВ остальных случаях программа печатает False. ",
        "correct_example": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color in cite_project:\n    print(True)\nelse:\n    print(False)",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n#e4e3b3\nОжидаемый ответ:\nFalse\nОтвет решения:\nTrue\n\n"
    },
    "211": {
        "student_solution": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project: \n    print(True)\nelif color in cite_project:\n    print(True)\nelse:\n    print(False)",
        "task": "Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:\n\nДаны два списка logo_project и cite_project с кодами используемых цветов (строки).\nВ переменную color считывается код цвета (строка). Этот код уже написан.\nПрограмма должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. \nВ остальных случаях программа печатает False. ",
        "correct_example": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color in cite_project:\n    print(True)\nelse:\n    print(False)",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n#e4e3b3\nОжидаемый ответ:\nFalse\nОтвет решения:\nTrue\n\n"
    },
    "212": {
        "student_solution": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color in cite_project:\n    print(False)\nelse:\n    print(True)",
        "task": "Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:\n\nДаны два списка logo_project и cite_project с кодами используемых цветов (строки).\nВ переменную color считывается код цвета (строка). Этот код уже написан.\nПрограмма должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. \nВ остальных случаях программа печатает False. ",
        "correct_example": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color in cite_project:\n    print(True)\nelse:\n    print(False)",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n#e4e3b3\nОжидаемый ответ:\nFalse\nОтвет решения:\nTrue\n\n"
    },
    "213": {
        "student_solution": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color in cite_project\n    print(True)\nelse:\n    print(False)",
        "task": "Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:\n\nДаны два списка logo_project и cite_project с кодами используемых цветов (строки).\nВ переменную color считывается код цвета (строка). Этот код уже написан.\nПрограмма должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. \nВ остальных случаях программа печатает False. ",
        "correct_example": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color in cite_project:\n    print(True)\nelse:\n    print(False)",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\26\\codefile.py\", line 10\n    if color not in logo_project and color in cite_project\n                                                          ^\nSyntaxError: invalid syntax\n"
    },
    "214": {
        "student_solution": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logoproject and color in citeproject:\n    print(True)\nelse:\n    print(False)",
        "task": "Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:\n\nДаны два списка logo_project и cite_project с кодами используемых цветов (строки).\nВ переменную color считывается код цвета (строка). Этот код уже написан.\nПрограмма должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. \nВ остальных случаях программа печатает False. ",
        "correct_example": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color in cite_project:\n    print(True)\nelse:\n    print(False)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n#ccb1e6\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\26\\codefile.py\", line 10, in <module>\n    if color not in logoproject and color in citeproject:\nNameError: name 'logoproject' is not defined\n\n"
    },
    "215": {
        "student_solution": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color in cite_project:\n    print(True)\nelse:\nprint(False)",
        "task": "Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:\n\nДаны два списка logo_project и cite_project с кодами используемых цветов (строки).\nВ переменную color считывается код цвета (строка). Этот код уже написан.\nПрограмма должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. \nВ остальных случаях программа печатает False. ",
        "correct_example": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color in cite_project:\n    print(True)\nelse:\n    print(False)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n#ccb1e6\nЛог:\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\26\\codefile.py\", line 13\n    print(False)\n    ^\nIndentationError: expected an indented block\n\n"
    },
    "216": {
        "student_solution": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color in cite_project:\n    print(True\nelse:\n    print(False)",
        "task": "Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:\n\nДаны два списка logo_project и cite_project с кодами используемых цветов (строки).\nВ переменную color считывается код цвета (строка). Этот код уже написан.\nПрограмма должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. \nВ остальных случаях программа печатает False. ",
        "correct_example": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color in cite_project:\n    print(True)\nelse:\n    print(False)",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\26\\codefile.py\", line 12\n    else:\n    ^\nSyntaxError: invalid syntax\n"
    },
    "217": {
        "student_solution": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color in cite_project:\n    print(True)\nelse color in logo_project and color not in cite_project:\n    print(False)",
        "task": "Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:\n\nДаны два списка logo_project и cite_project с кодами используемых цветов (строки).\nВ переменную color считывается код цвета (строка). Этот код уже написан.\nПрограмма должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. \nВ остальных случаях программа печатает False. ",
        "correct_example": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color in cite_project:\n    print(True)\nelse:\n    print(False)",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\26\\codefile.py\", line 12\n    else color in logo_project and color not in cite_project:\n         ^\nSyntaxError: invalid syntax\n"
    },
    "218": {
        "student_solution": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color in cite_project:\n    print(true)\nelse:\n    print(false)",
        "task": "Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:\n\nДаны два списка logo_project и cite_project с кодами используемых цветов (строки).\nВ переменную color считывается код цвета (строка). Этот код уже написан.\nПрограмма должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. \nВ остальных случаях программа печатает False. ",
        "correct_example": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color in cite_project:\n    print(True)\nelse:\n    print(False)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n#ccb1e6\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\26\\codefile.py\", line 13, in <module>\n    print(false)\nNameError: name 'false' is not defined\n\n"
    },
    "219": {
        "student_solution": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project:\n    print(True)\nelse:\n    print(False)",
        "task": "Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:\n\nДаны два списка logo_project и cite_project с кодами используемых цветов (строки).\nВ переменную color считывается код цвета (строка). Этот код уже написан.\nПрограмма должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. \nВ остальных случаях программа печатает False. ",
        "correct_example": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project and color in cite_project:\n    print(True)\nelse:\n    print(False)",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n#e4e3b3\nОжидаемый ответ:\nFalse\nОтвет решения:\nTrue\n\n"
    },
    "235": {
        "student_solution": "logo = input()\n\nres = []\nfor info in logo:\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "task": "Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: \n\nВ переменную logo считывается текст лендинга. Этот код уже написан.\nПрограмма проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака \"@\" и которые содержат в себе только цифры или буквы (не включая знак \"@\"). Гарантируется, что упоминания отделены от другого текста пробелом. \nВ конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.\nЕсли упоминаний в тексте нет, то программа ничего не печатает.",
        "correct_example": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple\nОжидаемый ответ:\n@thebestteacher\nОтвет решения:\n\n\n"
    },
    "236": {
        "student_solution": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') or info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "task": "Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: \n\nВ переменную logo считывается текст лендинга. Этот код уже написан.\nПрограмма проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака \"@\" и которые содержат в себе только цифры или буквы (не включая знак \"@\"). Гарантируется, что упоминания отделены от другого текста пробелом. \nВ конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.\nЕсли упоминаний в тексте нет, то программа ничего не печатает.",
        "correct_example": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple\nОжидаемый ответ:\n@thebestteacher\nОтвет решения:\n\n\n"
    },
    "237": {
        "student_solution": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith(@) and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "task": "Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: \n\nВ переменную logo считывается текст лендинга. Этот код уже написан.\nПрограмма проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака \"@\" и которые содержат в себе только цифры или буквы (не включая знак \"@\"). Гарантируется, что упоминания отделены от другого текста пробелом. \nВ конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.\nЕсли упоминаний в тексте нет, то программа ничего не печатает.",
        "correct_example": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\27\\codefile.py\", line 6\n    if info.startswith(@) and info[1:].isalnum() == True:      \n                       ^\nSyntaxError: invalid syntax\n"
    },
    "238": {
        "student_solution": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info.isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "task": "Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: \n\nВ переменную logo считывается текст лендинга. Этот код уже написан.\nПрограмма проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака \"@\" и которые содержат в себе только цифры или буквы (не включая знак \"@\"). Гарантируется, что упоминания отделены от другого текста пробелом. \nВ конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.\nЕсли упоминаний в тексте нет, то программа ничего не печатает.",
        "correct_example": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple\nОжидаемый ответ:\n@thebestteacher\nОтвет решения:\n\n\n"
    },
    "239": {
        "student_solution": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and not(info[1:].isnumeric() == True):      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "task": "Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: \n\nВ переменную logo считывается текст лендинга. Этот код уже написан.\nПрограмма проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака \"@\" и которые содержат в себе только цифры или буквы (не включая знак \"@\"). Гарантируется, что упоминания отделены от другого текста пробелом. \nВ конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.\nЕсли упоминаний в тексте нет, то программа ничего не печатает.",
        "correct_example": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple\nОжидаемый ответ:\n@thebestteacher\nОтвет решения:\n\n\n"
    },
    "240": {
        "student_solution": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() = True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "task": "Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: \n\nВ переменную logo считывается текст лендинга. Этот код уже написан.\nПрограмма проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака \"@\" и которые содержат в себе только цифры или буквы (не включая знак \"@\"). Гарантируется, что упоминания отделены от другого текста пробелом. \nВ конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.\nЕсли упоминаний в тексте нет, то программа ничего не печатает.",
        "correct_example": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\27\\codefile.py\", line 6\n    if info.startswith('@') and info[1:].isalnum() = True:      \n                                                   ^\nSyntaxError: invalid syntax\n"
    },
    "241": {
        "student_solution": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.add(info)\n        \nprint(*res, sep=', ')",
        "task": "Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: \n\nВ переменную logo считывается текст лендинга. Этот код уже написан.\nПрограмма проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака \"@\" и которые содержат в себе только цифры или буквы (не включая знак \"@\"). Гарантируется, что упоминания отделены от другого текста пробелом. \nВ конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.\nЕсли упоминаний в тексте нет, то программа ничего не печатает.",
        "correct_example": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple\nОжидаемый ответ:\n@thebestteacher\nОтвет решения:\n\n\n"
    },
    "242": {
        "student_solution": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*info, sep=', ')",
        "task": "Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: \n\nВ переменную logo считывается текст лендинга. Этот код уже написан.\nПрограмма проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака \"@\" и которые содержат в себе только цифры или буквы (не включая знак \"@\"). Гарантируется, что упоминания отделены от другого текста пробелом. \nВ конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.\nЕсли упоминаний в тексте нет, то программа ничего не печатает.",
        "correct_example": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\27\\codefile.py\", line 9, in <module>\n    print(*info, sep=', ')\nNameError: name 'info' is not defined\n\n"
    },
    "243": {
        "student_solution": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \n    print(*res, sep=', ')",
        "task": "Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: \n\nВ переменную logo считывается текст лендинга. Этот код уже написан.\nПрограмма проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака \"@\" и которые содержат в себе только цифры или буквы (не включая знак \"@\"). Гарантируется, что упоминания отделены от другого текста пробелом. \nВ конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.\nЕсли упоминаний в тексте нет, то программа ничего не печатает.",
        "correct_example": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple\nОжидаемый ответ:\n@thebestteacher\nОтвет решения:\n\n"
    },
    "244": {
        "student_solution": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(logo)\n        \nprint(*res, sep=', ')",
        "task": "Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: \n\nВ переменную logo считывается текст лендинга. Этот код уже написан.\nПрограмма проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака \"@\" и которые содержат в себе только цифры или буквы (не включая знак \"@\"). Гарантируется, что упоминания отделены от другого текста пробелом. \nВ конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.\nЕсли упоминаний в тексте нет, то программа ничего не печатает.",
        "correct_example": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple\nОжидаемый ответ:\n@thebestteacher\nОтвет решения:\n\n\n"
    },
    "245": {
        "student_solution": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(res)",
        "task": "Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: \n\nВ переменную logo считывается текст лендинга. Этот код уже написан.\nПрограмма проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака \"@\" и которые содержат в себе только цифры или буквы (не включая знак \"@\"). Гарантируется, что упоминания отделены от другого текста пробелом. \nВ конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.\nЕсли упоминаний в тексте нет, то программа ничего не печатает.",
        "correct_example": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple\nОжидаемый ответ:\n@thebestteacher\nОтвет решения:\n[]\n\n"
    },
    "246": {
        "student_solution": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res)",
        "task": "Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: \n\nВ переменную logo считывается текст лендинга. Этот код уже написан.\nПрограмма проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака \"@\" и которые содержат в себе только цифры или буквы (не включая знак \"@\"). Гарантируется, что упоминания отделены от другого текста пробелом. \nВ конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.\nЕсли упоминаний в тексте нет, то программа ничего не печатает.",
        "correct_example": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple\nОжидаемый ответ:\n@thebestteacher\nОтвет решения:\n\n\n"
    },
    "247": {
        "student_solution": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=',')",
        "task": "Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: \n\nВ переменную logo считывается текст лендинга. Этот код уже написан.\nПрограмма проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака \"@\" и которые содержат в себе только цифры или буквы (не включая знак \"@\"). Гарантируется, что упоминания отделены от другого текста пробелом. \nВ конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.\nЕсли упоминаний в тексте нет, то программа ничего не печатает.",
        "correct_example": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple\nОжидаемый ответ:\n@thebestteacher\nОтвет решения:\n\n\n"
    },
    "248": {
        "student_solution": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*sorted(res), sep=', ')",
        "task": "Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: \n\nВ переменную logo считывается текст лендинга. Этот код уже написан.\nПрограмма проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака \"@\" и которые содержат в себе только цифры или буквы (не включая знак \"@\"). Гарантируется, что упоминания отделены от другого текста пробелом. \nВ конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.\nЕсли упоминаний в тексте нет, то программа ничего не печатает.",
        "correct_example": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple\nОжидаемый ответ:\n@thebestteacher\nОтвет решения:\n\n\n"
    },
    "249": {
        "student_solution": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isnumeric() == True or info[1:].isalpha() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "task": "Реализуйте программу, которая напечатает все упоминания из фраз для лендинга сайта: \n\nВ переменную logo считывается текст лендинга. Этот код уже написан.\nПрограмма проверяет, есть ли в этом тексте упоминания.  Упоминаниями можно считать все элементы, которые начинаются со знака \"@\" и которые содержат в себе только цифры или буквы (не включая знак \"@\"). Гарантируется, что упоминания отделены от другого текста пробелом. \nВ конце программа печатает все упоминания через запятую с пробелом. Упоминания выводятся в том же порядке, в котором они идут в тексте.\nЕсли упоминаний в тексте нет, то программа ничего не печатает.",
        "correct_example": "logo = input()\n\nres = []\nfor info in logo.split():\n    if info.startswith('@') and info[1:].isalnum() == True:      \n        res.append(info)\n        \nprint(*res, sep=', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n@thebestteacher ответит Вам в течение 10 минут, если Вы напишите в телеграм-канал @ennglish_is_simple\nОжидаемый ответ:\n@thebestteacher\nОтвет решения:\n\n\n"
    },
    "250": {
        "student_solution": "allowed_colors = input().split(', ')\nfavorite_colors = input().split(', ')\nused_colors = input().split(', ')\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nАлый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\28\\codefile.py\", line 11, in <module>\n    favorite_colors = input().split(', ')\nEOFError: EOF when reading a line\n\n"
    },
    "251": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(used_colors & favorite_colors - allowed_colors)",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nАлый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\28\\codefile.py\", line 11, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "252": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*(used_colors & favorite_colors - allowed_colors))",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nАлый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\28\\codefile.py\", line 11, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "253": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors))",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nАлый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\28\\codefile.py\", line 11, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "254": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nАлый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\28\\codefile.py\", line 11, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "255": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nАлый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\28\\codefile.py\", line 11, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "256": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors - favorite_colors & allowed_colors, reverse = False), sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nАлый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\28\\codefile.py\", line 11, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "257": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors and favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nАлый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\28\\codefile.py\", line 11, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "258": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors & allowed_colors, reverse = False), sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nАлый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\28\\codefile.py\", line 11, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "259": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors + favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nАлый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\28\\codefile.py\", line 11, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "260": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(usedcolors & favoritecolors - allowedcolors, reverse = False), sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nАлый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\28\\codefile.py\", line 11, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "261": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors, reverse = False), sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nАлый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\28\\codefile.py\", line 11, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "262": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nАлый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\28\\codefile.py\", line 11, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "263": {
        "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = ' !')",
        "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые не разрешены для использования в проекте, но при этом уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ",
        "correct_example": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(used_colors & favorite_colors - allowed_colors, reverse = False), sep = '; ', end = '!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nАлый, Белый, Бордо, Графитно-черный, Гранитный, Медовый, Ниагара, Нефритовый\nПастельно-зеленый, Патиново-зеленый, Оливковый, Сапфировый, Белый\nОгненно-красный, Пастельно-зеленый, Ниагара, Оливковый, Белый, Алый, Медовый, Патиново-зеленый\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\28\\codefile.py\", line 11, in <module>\n    favorite_colors = set(input().split(', '))\nEOFError: EOF when reading a line\n\n"
    },
    "264": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios:\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "task": "Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в обратном алфавитном порядке.\nЕсли ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nкабинет\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\29\\codefile.py\", line 31, in <module>\n    for key, value in studios:\nValueError: too many values to unpack (expected 2)\n\n"
    },
    "265": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value:\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "task": "Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в обратном алфавитном порядке.\nЕсли ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nкабинет\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\29\\codefile.py\", line 32, in <module>\n    for k, v in value:\nValueError: too many values to unpack (expected 2)\n\n"
    },
    "266": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in key.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "task": "Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в обратном алфавитном порядке.\nЕсли ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nкабинет\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\29\\codefile.py\", line 32, in <module>\n    for k, v in key.items():\nAttributeError: 'str' object has no attribute 'items'\n\n"
    },
    "267": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(key)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "task": "Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в обратном алфавитном порядке.\nЕсли ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nГринфилд/Гринфилд\nОтвет решения:\n\n\n"
    },
    "268": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "task": "Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в обратном алфавитном порядке.\nЕсли ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\29\\codefile.py\", line 33\n    if room  in v\n                 ^\nSyntaxError: invalid syntax\n"
    },
    "269": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room in v:\n            residences.append(value)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "task": "Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в обратном алфавитном порядке.\nЕсли ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nГринфилд/Гринфилд\nОтвет решения:\n\n\n"
    },
    "270": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(residences)",
        "task": "Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в обратном алфавитном порядке.\nЕсли ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nГринфилд/Гринфилд\nОтвет решения:\n[]\n\n"
    },
    "271": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*residences)",
        "task": "Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в обратном алфавитном порядке.\nЕсли ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nГринфилд/Гринфилд\nОтвет решения:\n\n\n"
    },
    "272": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences))",
        "task": "Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в обратном алфавитном порядке.\nЕсли ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nГринфилд/Гринфилд\nОтвет решения:\n\n\n"
    },
    "273": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences), sep='/')",
        "task": "Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в обратном алфавитном порядке.\nЕсли ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nГринфилд/Гринфилд\nОтвет решения:\n\n\n"
    },
    "274": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True))",
        "task": "Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в обратном алфавитном порядке.\nЕсли ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nГринфилд/Гринфилд\nОтвет решения:\n\n\n"
    },
    "275": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    if room  in value[1]:\n        residences.append(value[0])\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "task": "Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в обратном алфавитном порядке.\nЕсли ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nкабинет\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\29\\codefile.py\", line 32, in <module>\n    if room  in value[1]:\nKeyError: 1\n\n"
    },
    "276": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room not in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "task": "Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в обратном алфавитном порядке.\nЕсли ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nГринфилд/Гринфилд\nОтвет решения:\nТеатральный квартал/Сканди-парк/Риверсайд/Монтевиль/Гринфилд/Гринфилд/Британика/Британика/Британика\n\n"
    },
    "277": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.add(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "task": "Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в обратном алфавитном порядке.\nЕсли ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nГринфилд/Гринфилд\nОтвет решения:\n\n\n"
    },
    "278": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residence.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "task": "Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в обратном алфавитном порядке.\nЕсли ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nГринфилд/Гринфилд\nОтвет решения:\n\n\n"
    },
    "279": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences), reverse = True,  sep='/')",
        "task": "Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в обратном алфавитном порядке.\nЕсли ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nкабинет\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\29\\codefile.py\", line 36, in <module>\n    print(*sorted(residences), reverse = True,  sep='/')\nTypeError: 'reverse' is an invalid keyword argument for print()\n\n"
    },
    "280": {
        "student_solution": "room = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \n    print(*sorted(residences, reverse = True), sep='/')",
        "task": "Реализуйте программу, которая определит поселки, где студии дизайна занимались интерьером определенного помещения в домах из разных поселков:\n\nДан словарь studios, где ключи — это названия студий дизана интерьеров, а значения — словари (где ключи — названия поселков, а значения — списки с названиями помещений, интерьером которых занималась студия в данном поселке). Этот код уже написан.\nВ переменную room считывается название помещения (строка). Этот код уже написан.\nОпределите, в каких поселках студии занимались дизайном интерьера введенного помещения  и напечатайте названия поселков через прямой слэш (\"/\"). Названия поселков должны идти в обратном алфавитном порядке.\nЕсли ни в одном поселке не было дизайна указанного помещения, то программа ничего не печатает.",
        "correct_example": "studios = {\n    \n    'Rutemple Studio': {'Сканди-парк': ['мастер-спальня', 'столовая', 'гостинная', 'прихожая'], \n                        'Британика': ['прихожая', 'санузел', 'столовая', 'гостинная']},\n    'VDT': {'Гринфилд': ['гостинная', 'гардеробная', 'кабинет', 'столовая'], \n            'Британика': [\"прихожая\", 'гостинная', 'столовая'], \n            'Театральный квартал': [\"прихожая\", \"гостевой санузел\", 'столовая', 'гостинная']},\n    'Greenvillage': {'Британика': [\"столовая\", \"гостинная\"], \n                     'Риверсайд': [\"гостинная\", \"столовая\", \"санузел\"]},\n    'T+T architects': {'Гринфилд': [\"гостинная\", \"прихожая\", \"столовая\", 'кабинет'], \n                       'Монтевиль':[\"гостинная\", 'столовая']}\n}\n\nroom = input()\n\nresidences = []\nfor key, value in studios.items():\n    for k, v in value.items():\n        if room  in v:\n            residences.append(k)\n    \nprint(*sorted(residences, reverse = True), sep='/')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nкабинет\nОжидаемый ответ:\nГринфилд/Гринфилд\nОтвет решения:\n\n\n\n\n\n"
    },
    "298": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.txt', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "299": {
        "student_solution": "week = int(input())\n\nopen('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "300": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "301": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "302": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "303": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(', ')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "304": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "305": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[1]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "306": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if info[-1].split()[0] <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "307": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) < week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "308": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week or int(info[-2].split()[0]) <= 250:\n            print(line)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "309": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) < 250:\n            print(line)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "310": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) == week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "311": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[2].split()[0]) <= 250:\n            print(line)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "312": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and info[-2].split()[0] <= 250:\n            print(line)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "313": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "314": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(info)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "315": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week:\n            print(info)\n        if int(info[-2].split()[0]) <= 250:\n            print(info)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "316": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week:\n            print(info)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "317": {
        "student_solution": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-2].split()[0]) <= 250:\n            print(info)",
        "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "week = int(input())\n\nwith open('projects_file.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[-1].split()[0]) <= week and int(info[-2].split()[0]) <= 250:\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "318": {
        "student_solution": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join(house1, house2, house3)\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "task": "Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.\nФОРМАТ ВЫВОДА \nВещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. \nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную-счетчик для определения максимальной суммы трат.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.\nНапечатайте значение переменной-счетчика.",
        "correct_example": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nВаза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\31\\codefile.py\", line 6, in <module>\n    res = '; '.join(house1, house2, house3)\nTypeError: str.join() takes exactly one argument (3 given)\n\n"
    },
    "319": {
        "student_solution": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house, house1, house2] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "task": "Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.\nФОРМАТ ВЫВОДА \nВещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. \nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную-счетчик для определения максимальной суммы трат.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.\nНапечатайте значение переменной-счетчика.",
        "correct_example": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nВаза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\31\\codefile.py\", line 6, in <module>\n    res = '; '.join([house, house1, house2] )\nNameError: name 'house' is not defined\n\n"
    },
    "320": {
        "student_solution": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split(', ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "task": "Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.\nФОРМАТ ВЫВОДА \nВещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. \nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную-счетчик для определения максимальной суммы трат.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.\nНапечатайте значение переменной-счетчика.",
        "correct_example": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nВаза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.\nОжидаемый ответ:\n150000\nОтвет решения:\n3000\n\n"
    },
    "321": {
        "student_solution": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "task": "Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.\nФОРМАТ ВЫВОДА \nВещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. \nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную-счетчик для определения максимальной суммы трат.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.\nНапечатайте значение переменной-счетчика.",
        "correct_example": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\31\\codefile.py\", line 10\n    for item in res\n                   ^\nSyntaxError: invalid syntax\n"
    },
    "322": {
        "student_solution": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor i in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "task": "Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.\nФОРМАТ ВЫВОДА \nВещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. \nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную-счетчик для определения максимальной суммы трат.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.\nНапечатайте значение переменной-счетчика.",
        "correct_example": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nВаза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\31\\codefile.py\", line 11, in <module>\n    k = int(item.split(': ')[1].split()[0])\nNameError: name 'item' is not defined\n\n"
    },
    "323": {
        "student_solution": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[0].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "task": "Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.\nФОРМАТ ВЫВОДА \nВещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. \nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную-счетчик для определения максимальной суммы трат.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.\nНапечатайте значение переменной-счетчика.",
        "correct_example": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nВаза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\31\\codefile.py\", line 11, in <module>\n    k = int(item.split(': ')[0].split()[0])\nValueError: invalid literal for int() with base 10: 'Ваза'\n\n"
    },
    "324": {
        "student_solution": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[1])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "task": "Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.\nФОРМАТ ВЫВОДА \nВещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. \nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную-счетчик для определения максимальной суммы трат.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.\nНапечатайте значение переменной-счетчика.",
        "correct_example": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nВаза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\31\\codefile.py\", line 11, in <module>\n    k = int(item.split(': ')[1].split()[1])\nValueError: invalid literal for int() with base 10: 'руб.'\n\n"
    },
    "325": {
        "student_solution": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \n    print(max_pr)",
        "task": "Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.\nФОРМАТ ВЫВОДА \nВещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. \nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную-счетчик для определения максимальной суммы трат.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.\nНапечатайте значение переменной-счетчика.",
        "correct_example": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nВаза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.\nОжидаемый ответ:\n150000\nОтвет решения:\n3000\n28000\n28000\n90000\n90000\n150000\n150000\n\n"
    },
    "326": {
        "student_solution": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split('; ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "task": "Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.\nФОРМАТ ВЫВОДА \nВещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. \nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную-счетчик для определения максимальной суммы трат.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.\nНапечатайте значение переменной-счетчика.",
        "correct_example": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nВаза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\31\\codefile.py\", line 11, in <module>\n    k = int(item.split('; ')[1].split()[0])\nIndexError: list index out of range\n\n"
    },
    "327": {
        "student_solution": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "task": "Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.\nФОРМАТ ВЫВОДА \nВещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. \nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную-счетчик для определения максимальной суммы трат.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.\nНапечатайте значение переменной-счетчика.",
        "correct_example": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nВаза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\31\\codefile.py\", line 11, in <module>\n    if k > max_pr:\nNameError: name 'max_pr' is not defined\n\n"
    },
    "328": {
        "student_solution": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k >= max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "task": "Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.\nФОРМАТ ВЫВОДА \nВещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. \nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную-счетчик для определения максимальной суммы трат.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.\nНапечатайте значение переменной-счетчика.",
        "correct_example": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "tester_report": "Не удалось протостировать решение"
    },
    "329": {
        "student_solution": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k < max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "task": "Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.\nФОРМАТ ВЫВОДА \nВещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. \nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную-счетчик для определения максимальной суммы трат.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.\nНапечатайте значение переменной-счетчика.",
        "correct_example": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nВаза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.\nОжидаемый ответ:\n150000\nОтвет решения:\n0\n\n"
    },
    "330": {
        "student_solution": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k == max_pr:\n        print(max_pr)",
        "task": "Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.\nФОРМАТ ВЫВОДА \nВещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. \nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную-счетчик для определения максимальной суммы трат.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.\nНапечатайте значение переменной-счетчика.",
        "correct_example": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nВаза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.\nОжидаемый ответ:\n150000\nОтвет решения:\n\n"
    },
    "331": {
        "student_solution": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr == k\n\n    \nprint(max_pr)",
        "task": "Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.\nФОРМАТ ВЫВОДА \nВещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. \nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную-счетчик для определения максимальной суммы трат.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.\nНапечатайте значение переменной-счетчика.",
        "correct_example": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nВаза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.\nОжидаемый ответ:\n150000\nОтвет решения:\n0\n\n"
    },
    "332": {
        "student_solution": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(k)",
        "task": "Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.\nФОРМАТ ВЫВОДА \nВещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. \nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную-счетчик для определения максимальной суммы трат.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.\nНапечатайте значение переменной-счетчика.",
        "correct_example": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nВаза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.\nОжидаемый ответ:\n150000\nОтвет решения:\n10000\n\n"
    },
    "333": {
        "student_solution": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3])\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    \nif k > max_pr:\n    max_pr = k\n\n    \nprint(max_pr)",
        "task": "Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.\nФОРМАТ ВЫВОДА \nВещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. \nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную-счетчик для определения максимальной суммы трат.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.\nНапечатайте значение переменной-счетчика.",
        "correct_example": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k > max_pr:\n        max_pr = k\n\n    \nprint(max_pr)",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nВаза: 3000 руб.; Картина: 28000 руб.; Зеркало: 5000 руб.\nКовер: 90000 руб.; Этажерка: 9000 руб.\nПанно: 150000 руб.; Декоративный цветок: 10000 руб.\nОжидаемый ответ:\n150000\nОтвет решения:\n10000\n\n"
    },
    "350": {
        "student_solution": "def work(slov)\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]",
        "task": "Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой \"реализован\" или \"не реализован\"). Гарантируется, что словарь содержит информацию минимум об одном проекте.\nЕсли дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.\nЕсли были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте три переменные-счетчика — одну для подсчета строк \" не реализован\", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"не реализован\", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение \"реализован\", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).\nПроверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\nslov = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\n\ndef work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]\nprint (work(slov))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\32\\codefile.py\", line 4\n    def work(slov)\n                  ^\nSyntaxError: invalid syntax\n"
    },
    "351": {
        "student_solution": "def work():\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]",
        "task": "Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой \"реализован\" или \"не реализован\"). Гарантируется, что словарь содержит информацию минимум об одном проекте.\nЕсли дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.\nЕсли были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте три переменные-счетчика — одну для подсчета строк \" не реализован\", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"не реализован\", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение \"реализован\", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).\nПроверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\nslov = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\n\ndef work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]\nprint (work(slov))",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\32\\codefile.py\", line 20, in <module>\n    print (work(slov))\nTypeError: work() takes 0 positional arguments but 1 was given\n\n"
    },
    "352": {
        "student_solution": "def work(slov):\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]",
        "task": "Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой \"реализован\" или \"не реализован\"). Гарантируется, что словарь содержит информацию минимум об одном проекте.\nЕсли дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.\nЕсли были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте три переменные-счетчика — одну для подсчета строк \" не реализован\", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"не реализован\", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение \"реализован\", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).\nПроверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\nslov = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\n\ndef work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]\nprint (work(slov))",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\32\\codefile.py\", line 19, in <module>\n    print (work(slov))\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\32\\codefile.py\", line 9, in work\n    counter += 1\nUnboundLocalError: local variable 'counter' referenced before assignment\n\n"
    },
    "353": {
        "student_solution": "def work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov:\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]",
        "task": "Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой \"реализован\" или \"не реализован\"). Гарантируется, что словарь содержит информацию минимум об одном проекте.\nЕсли дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.\nЕсли были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте три переменные-счетчика — одну для подсчета строк \" не реализован\", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"не реализован\", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение \"реализован\", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).\nПроверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\nslov = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\n\ndef work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]\nprint (work(slov))",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\32\\codefile.py\", line 20, in <module>\n    print (work(slov))\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\32\\codefile.py\", line 8, in work\n    for k, v in slov:\nValueError: too many values to unpack (expected 2)\n\n"
    },
    "354": {
        "student_solution": "def work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if k[1] == 'не реализован':\n            counter += 1\n            money_done += k[0]\n        if k[1] == 'реализован':\n            money_not_done += k[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]",
        "task": "Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой \"реализован\" или \"не реализован\"). Гарантируется, что словарь содержит информацию минимум об одном проекте.\nЕсли дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.\nЕсли были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте три переменные-счетчика — одну для подсчета строк \" не реализован\", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"не реализован\", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение \"реализован\", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).\nПроверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\nslov = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\n\ndef work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]\nprint (work(slov))",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}\nОжидаемый ответ:\n[42000000, False]\nОтвет решения:\n[0, True]\n\n"
    },
    "355": {
        "student_solution": "def work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[0] == 'не реализован':\n            counter += 1\n            money_done += v[1]\n        if v[0] == 'реализован':\n            money_not_done += v[1]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]",
        "task": "Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой \"реализован\" или \"не реализован\"). Гарантируется, что словарь содержит информацию минимум об одном проекте.\nЕсли дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.\nЕсли были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте три переменные-счетчика — одну для подсчета строк \" не реализован\", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"не реализован\", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение \"реализован\", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).\nПроверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\nslov = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\n\ndef work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]\nprint (work(slov))",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}\nОжидаемый ответ:\n[42000000, False]\nОтвет решения:\n[0, True]\n\n"
    },
    "356": {
        "student_solution": "def work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] = 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] = 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]",
        "task": "Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой \"реализован\" или \"не реализован\"). Гарантируется, что словарь содержит информацию минимум об одном проекте.\nЕсли дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.\nЕсли были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте три переменные-счетчика — одну для подсчета строк \" не реализован\", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"не реализован\", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение \"реализован\", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).\nПроверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\nslov = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\n\ndef work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]\nprint (work(slov))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\32\\codefile.py\", line 9\n    if v[1] = 'не реализован':\n            ^\nSyntaxError: invalid syntax\n"
    },
    "357": {
        "student_solution": "def work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == не реализован:\n            counter += 1\n            money_done += v[0]\n        if v[1] == реализован:\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]",
        "task": "Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой \"реализован\" или \"не реализован\"). Гарантируется, что словарь содержит информацию минимум об одном проекте.\nЕсли дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.\nЕсли были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте три переменные-счетчика — одну для подсчета строк \" не реализован\", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"не реализован\", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение \"реализован\", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).\nПроверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\nslov = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\n\ndef work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]\nprint (work(slov))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\32\\codefile.py\", line 9\n    if v[1] == не реализован:\n                    ^\nSyntaxError: invalid syntax\n"
    },
    "358": {
        "student_solution": "def work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        else v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]",
        "task": "Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой \"реализован\" или \"не реализован\"). Гарантируется, что словарь содержит информацию минимум об одном проекте.\nЕсли дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.\nЕсли были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте три переменные-счетчика — одну для подсчета строк \" не реализован\", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"не реализован\", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение \"реализован\", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).\nПроверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\nslov = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\n\ndef work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]\nprint (work(slov))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\32\\codefile.py\", line 12\n    else v[1] == 'реализован':\n         ^\nSyntaxError: invalid syntax\n"
    },
    "359": {
        "student_solution": "def work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'не реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]",
        "task": "Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой \"реализован\" или \"не реализован\"). Гарантируется, что словарь содержит информацию минимум об одном проекте.\nЕсли дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.\nЕсли были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте три переменные-счетчика — одну для подсчета строк \" не реализован\", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"не реализован\", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение \"реализован\", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).\nПроверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\nslov = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\n\ndef work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]\nprint (work(slov))",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}\nОжидаемый ответ:\n[42000000, False]\nОтвет решения:\n[42000000, True]\n\n"
    },
    "360": {
        "student_solution": "def work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter == 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]",
        "task": "Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой \"реализован\" или \"не реализован\"). Гарантируется, что словарь содержит информацию минимум об одном проекте.\nЕсли дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.\nЕсли были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте три переменные-счетчика — одну для подсчета строк \" не реализован\", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"не реализован\", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение \"реализован\", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).\nПроверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\nslov = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\n\ndef work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]\nprint (work(slov))",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}\nОжидаемый ответ:\n[42000000, False]\nОтвет решения:\n[0, True]\n\n"
    },
    "361": {
        "student_solution": "def work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return False\n        \n    else:\n        return [money_not_done, True]",
        "task": "Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой \"реализован\" или \"не реализован\"). Гарантируется, что словарь содержит информацию минимум об одном проекте.\nЕсли дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.\nЕсли были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте три переменные-счетчика — одну для подсчета строк \" не реализован\", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"не реализован\", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение \"реализован\", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).\nПроверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\nslov = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\n\ndef work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]\nprint (work(slov))",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}\nОжидаемый ответ:\n[42000000, False]\nОтвет решения:\nFalse\n\n"
    },
    "362": {
        "student_solution": "def work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return True",
        "task": "Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой \"реализован\" или \"не реализован\"). Гарантируется, что словарь содержит информацию минимум об одном проекте.\nЕсли дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.\nЕсли были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте три переменные-счетчика — одну для подсчета строк \" не реализован\", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"не реализован\", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение \"реализован\", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).\nПроверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\nslov = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\n\ndef work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]\nprint (work(slov))",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n{\n    'Футурист': (1000000, 'реализован')\n}\nОжидаемый ответ:\n[1000000, True]\nОтвет решения:\nTrue\n\n"
    },
    "363": {
        "student_solution": "def work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        print([money_done, False])\n        \n    else:\n        print([money_not_done, True])",
        "task": "Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой \"реализован\" или \"не реализован\"). Гарантируется, что словарь содержит информацию минимум об одном проекте.\nЕсли дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.\nЕсли были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте три переменные-счетчика — одну для подсчета строк \" не реализован\", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"не реализован\", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение \"реализован\", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).\nПроверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\nslov = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\n\ndef work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]\nprint (work(slov))",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}\nОжидаемый ответ:\n[42000000, False]\nОтвет решения:\n[42000000, False]\nNone\n\n"
    },
    "364": {
        "student_solution": "def work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, false]\n        \n    else:\n        return [money_not_done, true]",
        "task": "Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой \"реализован\" или \"не реализован\"). Гарантируется, что словарь содержит информацию минимум об одном проекте.\nЕсли дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.\nЕсли были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте три переменные-счетчика — одну для подсчета строк \" не реализован\", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"не реализован\", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение \"реализован\", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).\nПроверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\nslov = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\n\ndef work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]\nprint (work(slov))",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\32\\codefile.py\", line 20, in <module>\n    print (work(slov))\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\32\\codefile.py\", line 16, in work\n    return [money_done, false]\nNameError: name 'false' is not defined\n\n"
    },
    "365": {
        "student_solution": "def work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]",
        "task": "Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой \"реализован\" или \"не реализован\"). Гарантируется, что словарь содержит информацию минимум об одном проекте.\nЕсли дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.\nЕсли были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте три переменные-счетчика — одну для подсчета строк \" не реализован\", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"не реализован\", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение \"реализован\", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).\nПроверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\nslov = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\n\ndef work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]\nprint (work(slov))",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n{\n    'Футурист': (1000000, 'реализован')\n}\nОжидаемый ответ:\n[1000000, True]\nОтвет решения:\nNone\n\n"
    },
    "366": {
        "student_solution": "def work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter == 0:\n        return [money_not_done, True]     ",
        "task": "Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой \"реализован\" или \"не реализован\"). Гарантируется, что словарь содержит информацию минимум об одном проекте.\nЕсли дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.\nЕсли были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте три переменные-счетчика — одну для подсчета строк \" не реализован\", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"не реализован\", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение \"реализован\", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).\nПроверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\nslov = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\n\ndef work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]\nprint (work(slov))",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}\nОжидаемый ответ:\n[42000000, False]\nОтвет решения:\nNone\n\n"
    },
    "367": {
        "student_solution": "def work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n        if counter != 0:\n            return [money_done, False]\n        \n        else:\n            return [money_not_done, True]",
        "task": "Напишите функцию, определяющую возьмут ли дизайнера М. в компанию на работу или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция work, принимающая на вход словарь, ключи в котором — названия проектов дизайнера (строки), а значения — кортежи с двумя элементами (целым числом — стоимость проекта; и строкой \"реализован\" или \"не реализован\"). Гарантируется, что словарь содержит информацию минимум об одном проекте.\nЕсли дизайнер не реализовал хотя бы один проект, то функция должна возвращать список из двух значений: целое число — стоимость нереализованных проектов, и логическую константу — False.\nЕсли были реализованы все проекты реализован, то функция возвращает список из двух значений: целое число — стоимость реализованных проектов, и логическую константу — True..\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте три переменные-счетчика — одну для подсчета строк \" не реализован\", другую для подсчета суммы нереализованных проектов, третью для подсчета суммы реализованных проектов.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"не реализован\", то обновите две переменные-счетчика — к первой прибавьте 1, а ко второй прибавьте нулевой по индексу элемент значения (кортежа). Если же первый по индексу элемент значения (кортежа) принимает значение \"реализован\", то обновите третью, прибавив к ней нулевой по индексу элемент значения (кортежа).\nПроверьте, что значение первой переменной-счетчика не равно нулю, и если это так, то пусть функция вернет список из двух элементов: значение второй-переменной-счетчика (сумма нереализованных проектов) и логической константы False; иначе пусть функция вернет список из двух элементов: значение третьей переменной-счетчика (сумма нереализованных проектов) и логической константы True.",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\nslov = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\n\ndef work(slov):\n    counter = 0\n    money_done = 0\n    money_not_done = 0\n    for k, v in slov.items():\n        if v[1] == 'не реализован':\n            counter += 1\n            money_done += v[0]\n        if v[1] == 'реализован':\n            money_not_done += v[0]\n            \n    if counter != 0:\n        return [money_done, False]\n        \n    else:\n        return [money_not_done, True]\nprint (work(slov))",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n{\n    'AltAirResidence': (3000000, 'не реализован'), \n    'Серебряный бор': (20000000, 'не реализован'), \n    'The one and only': (4000000, 'не реализован'), \n    'Айсберг': (5000000, 'не реализован'),\n    'Хайсбот': (10000000, 'не реализован')\n}\nОжидаемый ответ:\n[42000000, False]\nОтвет решения:\n[3000000, False]\n\n"
    },
    "389": {
        "student_solution": "ton = input()\n\n# ваш код ниже\n\nprint(\"Сегодня мы будем анализировать {ton} в тексте!\")",
        "task": "Реализуйте программу, которая напечатает анализируемое средство выразительности: \n\nВ переменную ton считывается название средства выразительности. Этот код уже написан.\nПрограмма должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "ton = input()\n\n# ваш код ниже\n\nprint(f\"Сегодня мы будем анализировать {ton} в тексте!\")",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nметафоры\nОжидаемый ответ:\nСегодня мы будем анализировать метафоры в тексте!\nОтвет решения:\nСегодня мы будем анализировать {ton} в тексте!\n\n"
    },
    "390": {
        "student_solution": "ton = input()\n\n# ваш код ниже\n\nprint(f\"Сегодня мы будем анализировать {ton} в тексте!)",
        "task": "Реализуйте программу, которая напечатает анализируемое средство выразительности: \n\nВ переменную ton считывается название средства выразительности. Этот код уже написан.\nПрограмма должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "ton = input()\n\n# ваш код ниже\n\nprint(f\"Сегодня мы будем анализировать {ton} в тексте!\")",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\33\\codefile.py\", line 6\n    print(f\"Сегодня мы будем анализировать {ton} в тексте!)\n                                                                                             ^\nSyntaxError: EOL while scanning string literal\n"
    },
    "391": {
        "student_solution": "ton = input()\n\n# ваш код ниже\n\nprint(fСегодня мы будем анализировать {ton} в тексте!\")",
        "task": "Реализуйте программу, которая напечатает анализируемое средство выразительности: \n\nВ переменную ton считывается название средства выразительности. Этот код уже написан.\nПрограмма должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "ton = input()\n\n# ваш код ниже\n\nprint(f\"Сегодня мы будем анализировать {ton} в тексте!\")",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\33\\codefile.py\", line 6\n    print(fСегодня мы будем анализировать {ton} в тексте!\")\n                          ^\nSyntaxError: invalid syntax\n"
    },
    "392": {
        "student_solution": "ton = input()\n\n# ваш код ниже\n\nprint(f\"Сегодня мы будем анализировать метафоры в тексте!\")",
        "task": "Реализуйте программу, которая напечатает анализируемое средство выразительности: \n\nВ переменную ton считывается название средства выразительности. Этот код уже написан.\nПрограмма должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "ton = input()\n\n# ваш код ниже\n\nprint(f\"Сегодня мы будем анализировать {ton} в тексте!\")",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nэпитеты\nОжидаемый ответ:\nСегодня мы будем анализировать эпитеты в тексте!\nОтвет решения:\nСегодня мы будем анализировать метафоры в тексте!\n\n"
    },
    "393": {
        "student_solution": "ton = input()\n\n# ваш код ниже\n\n    print(f\"Сегодня мы будем анализировать {ton} в тексте!\")",
        "task": "Реализуйте программу, которая напечатает анализируемое средство выразительности: \n\nВ переменную ton считывается название средства выразительности. Этот код уже написан.\nПрограмма должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "ton = input()\n\n# ваш код ниже\n\nprint(f\"Сегодня мы будем анализировать {ton} в тексте!\")",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nметафоры\nЛог:\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\33\\codefile.py\", line 6\n    print(f\"Сегодня мы будем анализировать {ton} в тексте!\")\nIndentationError: unexpected indent\n\n"
    },
    "394": {
        "student_solution": "ton = input()\n\n# ваш код ниже\n\nprint(f\"Сегодня мы будем анализировать ton в тексте!\")",
        "task": "Реализуйте программу, которая напечатает анализируемое средство выразительности: \n\nВ переменную ton считывается название средства выразительности. Этот код уже написан.\nПрограмма должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "ton = input()\n\n# ваш код ниже\n\nprint(f\"Сегодня мы будем анализировать {ton} в тексте!\")",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nметафоры\nОжидаемый ответ:\nСегодня мы будем анализировать метафоры в тексте!\nОтвет решения:\nСегодня мы будем анализировать ton в тексте!\n\n"
    },
    "395": {
        "student_solution": "ton = int(input())\n\n# ваш код ниже\n\nprint(f\"Сегодня мы будем анализировать {ton} в тексте!\")",
        "task": "Реализуйте программу, которая напечатает анализируемое средство выразительности: \n\nВ переменную ton считывается название средства выразительности. Этот код уже написан.\nПрограмма должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "ton = input()\n\n# ваш код ниже\n\nprint(f\"Сегодня мы будем анализировать {ton} в тексте!\")",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nметафоры\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\33\\codefile.py\", line 2, in <module>\n    ton = int(input())\nValueError: invalid literal for int() with base 10: ''\n\n"
    },
    "396": {
        "student_solution": "ton = input()\n\n# ваш код ниже\n\nPrint(f\"Сегодня мы будем анализировать {ton} в тексте!\")",
        "task": "Реализуйте программу, которая напечатает анализируемое средство выразительности: \n\nВ переменную ton считывается название средства выразительности. Этот код уже написан.\nПрограмма должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "ton = input()\n\n# ваш код ниже\n\nprint(f\"Сегодня мы будем анализировать {ton} в тексте!\")",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nметафоры\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\33\\codefile.py\", line 6, in <module>\n    Print(f\"Сегодня мы будем анализировать {ton} в тексте!\")\nNameError: name 'Print' is not defined\n\n"
    },
    "397": {
        "student_solution": "ton = input()\n\n# ваш код ниже\n\nprint(f\"Сегодня мы будем анализировать {variant} в тексте!\")",
        "task": "Реализуйте программу, которая напечатает анализируемое средство выразительности: \n\nВ переменную ton считывается название средства выразительности. Этот код уже написан.\nПрограмма должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "ton = input()\n\n# ваш код ниже\n\nprint(f\"Сегодня мы будем анализировать {ton} в тексте!\")",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nметафоры\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\33\\codefile.py\", line 6, in <module>\n    print(f\"Сегодня мы будем анализировать {variant} в тексте!\")\nNameError: name 'variant' is not defined\n\n"
    },
    "398": {
        "student_solution": "ton = input()\n\n# ваш код ниже\n\nprint(f\"Сегодня мы будем анализировать {ton} в тексте\")",
        "task": "Реализуйте программу, которая напечатает анализируемое средство выразительности: \n\nВ переменную ton считывается название средства выразительности. Этот код уже написан.\nПрограмма должна вывести фразу вида 'Сегодня мы будем анализировать '<название средства выразительности>' в тексте!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "ton = input()\n\n# ваш код ниже\n\nprint(f\"Сегодня мы будем анализировать {ton} в тексте!\")",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nметафоры\nОжидаемый ответ:\nСегодня мы будем анализировать метафоры в тексте!\nОтвет решения:\nСегодня мы будем анализировать  в тексте\n\n"
    },
    "399": {
        "student_solution": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] != second_language:\n    print(yes)\nelse:\n    print(no)",
        "task": "Реализуйте следующую программу:\n\nВ переменную language считывается строка вида \"<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>\". Этот код уже написан.\nВ переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.\nПрограмма должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу \"Сможем перевести\", она сохранена для вас в переменную yes.\nВ остальных случаях программа печатает фразу \"Не сможем перевести\". Эта строка сохранена для вас в переменную no.",
        "correct_example": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nРусский-Английский-есть\nРусский\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\34\\codefile.py\", line 7, in <module>\n    second_language = input()\nEOFError: EOF when reading a line\n\n"
    },
    "400": {
        "student_solution": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif есть in language and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "task": "Реализуйте следующую программу:\n\nВ переменную language считывается строка вида \"<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>\". Этот код уже написан.\nВ переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.\nПрограмма должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу \"Сможем перевести\", она сохранена для вас в переменную yes.\nВ остальных случаях программа печатает фразу \"Не сможем перевести\". Эта строка сохранена для вас в переменную no.",
        "correct_example": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nРусский-Английский-есть\nРусский\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\34\\codefile.py\", line 7, in <module>\n    second_language = input()\nEOFError: EOF when reading a line\n\n"
    },
    "401": {
        "student_solution": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.startswith('есть') and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "task": "Реализуйте следующую программу:\n\nВ переменную language считывается строка вида \"<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>\". Этот код уже написан.\nВ переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.\nПрограмма должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу \"Сможем перевести\", она сохранена для вас в переменную yes.\nВ остальных случаях программа печатает фразу \"Не сможем перевести\". Эта строка сохранена для вас в переменную no.",
        "correct_example": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nРусский-Английский-есть\nРусский\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\34\\codefile.py\", line 7, in <module>\n    second_language = input()\nEOFError: EOF when reading a line\n\n"
    },
    "402": {
        "student_solution": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language\n    print(yes)\nelse:\n    print(no)",
        "task": "Реализуйте следующую программу:\n\nВ переменную language считывается строка вида \"<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>\". Этот код уже написан.\nВ переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.\nПрограмма должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу \"Сможем перевести\", она сохранена для вас в переменную yes.\nВ остальных случаях программа печатает фразу \"Не сможем перевести\". Эта строка сохранена для вас в переменную no.",
        "correct_example": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\34\\codefile.py\", line 12\n    if language.endswith('есть') and language.split('-')[1] == second_language\n                                                                                  ^\nSyntaxError: invalid syntax\n"
    },
    "403": {
        "student_solution": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif languages.endswith('есть') and languages.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "task": "Реализуйте следующую программу:\n\nВ переменную language считывается строка вида \"<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>\". Этот код уже написан.\nВ переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.\nПрограмма должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу \"Сможем перевести\", она сохранена для вас в переменную yes.\nВ остальных случаях программа печатает фразу \"Не сможем перевести\". Эта строка сохранена для вас в переменную no.",
        "correct_example": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nРусский-Английский-есть\nРусский\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\34\\codefile.py\", line 7, in <module>\n    second_language = input()\nEOFError: EOF when reading a line\n\n"
    },
    "404": {
        "student_solution": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\nprint(yes)\nelse:\nprint(no)",
        "task": "Реализуйте следующую программу:\n\nВ переменную language считывается строка вида \"<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>\". Этот код уже написан.\nВ переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.\nПрограмма должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу \"Сможем перевести\", она сохранена для вас в переменную yes.\nВ остальных случаях программа печатает фразу \"Не сможем перевести\". Эта строка сохранена для вас в переменную no.",
        "correct_example": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nРусский-Английский-есть\nРусский\nЛог:\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\34\\codefile.py\", line 13\n    print(yes)\n    ^\nIndentationError: expected an indented block\n\n"
    },
    "405": {
        "student_solution": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no",
        "task": "Реализуйте следующую программу:\n\nВ переменную language считывается строка вида \"<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>\". Этот код уже написан.\nВ переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.\nПрограмма должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу \"Сможем перевести\", она сохранена для вас в переменную yes.\nВ остальных случаях программа печатает фразу \"Не сможем перевести\". Эта строка сохранена для вас в переменную no.",
        "correct_example": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\34\\codefile.py\", line 16\n    \n    ^\nSyntaxError: unexpected EOF while parsing\n"
    },
    "406": {
        "student_solution": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(yes)\nelse language.split('-')[1] != second_language:\n    print(no)",
        "task": "Реализуйте следующую программу:\n\nВ переменную language считывается строка вида \"<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>\". Этот код уже написан.\nВ переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.\nПрограмма должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу \"Сможем перевести\", она сохранена для вас в переменную yes.\nВ остальных случаях программа печатает фразу \"Не сможем перевести\". Эта строка сохранена для вас в переменную no.",
        "correct_example": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\34\\codefile.py\", line 14\n    else language.split('-')[1] != second_language:\n         ^\nSyntaxError: invalid syntax\n"
    },
    "407": {
        "student_solution": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('нет') and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "task": "Реализуйте следующую программу:\n\nВ переменную language считывается строка вида \"<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>\". Этот код уже написан.\nВ переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.\nПрограмма должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу \"Сможем перевести\", она сохранена для вас в переменную yes.\nВ остальных случаях программа печатает фразу \"Не сможем перевести\". Эта строка сохранена для вас в переменную no.",
        "correct_example": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nРусский-Английский-есть\nРусский\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\34\\codefile.py\", line 7, in <module>\n    second_language = input()\nEOFError: EOF when reading a line\n\n"
    },
    "408": {
        "student_solution": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть'):\n    print(yes)\neilf language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "task": "Реализуйте следующую программу:\n\nВ переменную language считывается строка вида \"<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>\". Этот код уже написан.\nВ переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.\nПрограмма должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу \"Сможем перевести\", она сохранена для вас в переменную yes.\nВ остальных случаях программа печатает фразу \"Не сможем перевести\". Эта строка сохранена для вас в переменную no.",
        "correct_example": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\34\\codefile.py\", line 14\n    eilf language.split('-')[1] == second_language:\n         ^\nSyntaxError: invalid syntax\n"
    },
    "409": {
        "student_solution": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(no)\nelse:\n    print(yes)",
        "task": "Реализуйте следующую программу:\n\nВ переменную language считывается строка вида \"<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>\". Этот код уже написан.\nВ переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.\nПрограмма должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу \"Сможем перевести\", она сохранена для вас в переменную yes.\nВ остальных случаях программа печатает фразу \"Не сможем перевести\". Эта строка сохранена для вас в переменную no.",
        "correct_example": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nРусский-Английский-есть\nРусский\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\34\\codefile.py\", line 7, in <module>\n    second_language = input()\nEOFError: EOF when reading a line\n\n"
    },
    "410": {
        "student_solution": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть'):\n    print(yes)\nelse:\n    print(no)",
        "task": "Реализуйте следующую программу:\n\nВ переменную language считывается строка вида \"<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>\". Этот код уже написан.\nВ переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.\nПрограмма должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу \"Сможем перевести\", она сохранена для вас в переменную yes.\nВ остальных случаях программа печатает фразу \"Не сможем перевести\". Эта строка сохранена для вас в переменную no.",
        "correct_example": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nРусский-Английский-есть\nРусский\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\34\\codefile.py\", line 7, in <module>\n    second_language = input()\nEOFError: EOF when reading a line\n\n"
    },
    "411": {
        "student_solution": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "task": "Реализуйте следующую программу:\n\nВ переменную language считывается строка вида \"<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>\". Этот код уже написан.\nВ переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.\nПрограмма должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу \"Сможем перевести\", она сохранена для вас в переменную yes.\nВ остальных случаях программа печатает фразу \"Не сможем перевести\". Эта строка сохранена для вас в переменную no.",
        "correct_example": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nРусский-Английский-есть\nРусский\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\34\\codefile.py\", line 7, in <module>\n    second_language = input()\nEOFError: EOF when reading a line\n\n"
    },
    "412": {
        "student_solution": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(yes)",
        "task": "Реализуйте следующую программу:\n\nВ переменную language считывается строка вида \"<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>\". Этот код уже написан.\nВ переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.\nПрограмма должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу \"Сможем перевести\", она сохранена для вас в переменную yes.\nВ остальных случаях программа печатает фразу \"Не сможем перевести\". Эта строка сохранена для вас в переменную no.",
        "correct_example": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nРусский-Английский-есть\nРусский\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\34\\codefile.py\", line 7, in <module>\n    second_language = input()\nEOFError: EOF when reading a line\n\n"
    },
    "413": {
        "student_solution": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] = second_language:\n    print(yes)\nelse:\n    print(no)",
        "task": "Реализуйте следующую программу:\n\nВ переменную language считывается строка вида \"<исходный язык текста>-<язык, на который нужно перевести текст>-<наличие специальных терминов в тексте — есть / нет>\". Этот код уже написан.\nВ переменную second_language считывается строка, обозначающая язык, на который нужно перевести текст. Этот код уже написан.\nПрограмма должна проверять, что язык, на который нужно перевести текст, совпадает с введенным значением и что в тексте есть специальные термины. Если выполняются оба условия, программа печатает фразу \"Сможем перевести\", она сохранена для вас в переменную yes.\nВ остальных случаях программа печатает фразу \"Не сможем перевести\". Эта строка сохранена для вас в переменную no.",
        "correct_example": "language = input()\nsecond_language = input()\n\nyes = 'Сможем перевести'\nno = 'Не сможем перевести'\n\nif language.endswith('есть') and language.split('-')[1] == second_language:\n    print(yes)\nelse:\n    print(no)",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\34\\codefile.py\", line 12\n    if language.endswith('есть') and language.split('-')[1] = second_language:\n                                                                ^\nSyntaxError: invalid syntax\n"
    },
    "483": {
        "student_solution": "words = input()\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "484": {
        "student_solution": "words = int(input())\n\nopen('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "485": {
        "student_solution": "words = int(input())\n\nwith open('info_texts.txt', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "486": {
        "student_solution": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "487": {
        "student_solution": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "488": {
        "student_solution": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(', ')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "489": {
        "student_solution": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\nif int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n        print(line)",
        "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "490": {
        "student_solution": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if info[0] <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "491": {
        "student_solution": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) < 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "492": {
        "student_solution": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and info[-1].split()[0] >= words and info[1] == 'французский':\n            print(line)",
        "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "493": {
        "student_solution": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[1]) >= words and info[1] == 'французский':\n            print(line)",
        "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "494": {
        "student_solution": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] = 'французский':\n            print(line)",
        "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "495": {
        "student_solution": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] != 'французский':\n            print(line)",
        "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "496": {
        "student_solution": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == французский:\n            print(line)",
        "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "497": {
        "student_solution": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(info)",
        "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "498": {
        "student_solution": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words or info[1] == 'французский':\n            print(line)",
        "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "499": {
        "student_solution": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 or int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "500": {
        "student_solution": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 & int(info[-1].split()[0]) >= words & info[1] == 'французский':\n            print(line)",
        "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.",
        "correct_example": "words = int(input())\n\nwith open('info_texts.csv', 'r', encoding='utf-8') as my_file:\n    for line in my_file:\n        line = line.strip()\n        info = line.split(',')\n        if int(info[0]) <= 2015 and int(info[-1].split()[0]) >= words and info[1] == 'французский':\n            print(line)",
        "tester_report": "Не удалось протостировать решение"
    },
    "519": {
        "student_solution": "data = input().split()\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.",
        "correct_example": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nОрганизатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\36\\codefile.py\", line 7, in <module>\n    comp, skills = comp.split(': ')\nValueError: not enough values to unpack (expected 2, got 1)\n\n"
    },
    "520": {
        "student_solution": "data = input().split('/ ')\nskill = input()\n\nresult = {}\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.",
        "correct_example": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nОрганизатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\36\\codefile.py\", line 10, in <module>\n    result.append(comp)\nAttributeError: 'dict' object has no attribute 'append'\n\n"
    },
    "521": {
        "student_solution": "data = input().split('/ ')\nskill = input()\n\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.",
        "correct_example": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nОрганизатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\36\\codefile.py\", line 9, in <module>\n    result.append(comp)\nNameError: name 'result' is not defined\n\n"
    },
    "522": {
        "student_solution": "data = input()\ndata.split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.",
        "correct_example": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nОрганизатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\36\\codefile.py\", line 8, in <module>\n    comp, skills = comp.split(': ')\nValueError: not enough values to unpack (expected 2, got 1)\n\n"
    },
    "523": {
        "student_solution": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor i in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.",
        "correct_example": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nОрганизатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\36\\codefile.py\", line 7, in <module>\n    comp, skills = comp.split(': ')\nNameError: name 'comp' is not defined\n\n"
    },
    "524": {
        "student_solution": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(':')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.",
        "correct_example": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "tester_report": "Не удалось протостировать решение"
    },
    "525": {
        "student_solution": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.",
        "correct_example": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\36\\codefile.py\", line 9\n    if skill in skills\n                      ^\nSyntaxError: invalid syntax\n"
    },
    "526": {
        "student_solution": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp = comp.split(': ')\n    \n    if skill in comp:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.",
        "correct_example": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nОрганизатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами\nОжидаемый ответ:\nОрганизатор международных мероприятий; Аккаунт-менеджер\nОтвет решения:\n\n\n"
    },
    "527": {
        "student_solution": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.add(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.",
        "correct_example": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nОрганизатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\36\\codefile.py\", line 10, in <module>\n    result.add(comp)\nAttributeError: 'list' object has no attribute 'add'\n\n"
    },
    "528": {
        "student_solution": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill not in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.",
        "correct_example": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nОрганизатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами\nОжидаемый ответ:\nОрганизатор международных мероприятий; Аккаунт-менеджер\nОтвет решения:\nМенеджер по локализации; Бизнес-аналитик\n\n"
    },
    "529": {
        "student_solution": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(result)",
        "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.",
        "correct_example": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nОрганизатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами\nОжидаемый ответ:\nОрганизатор международных мероприятий; Аккаунт-менеджер\nОтвет решения:\n['Организатор международных мероприятий', 'Аккаунт-менеджер']\n\n"
    },
    "530": {
        "student_solution": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*result)",
        "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.",
        "correct_example": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nОрганизатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами\nОжидаемый ответ:\nОрганизатор международных мероприятий; Аккаунт-менеджер\nОтвет решения:\nОрганизатор международных мероприятий Аккаунт-менеджер\n\n"
    },
    "531": {
        "student_solution": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result)",
        "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.",
        "correct_example": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\36\\codefile.py\", line 13\n    \n    ^\nSyntaxError: unexpected EOF while parsing\n"
    },
    "532": {
        "student_solution": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result), sep = '; ')",
        "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.",
        "correct_example": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nОрганизатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами\nОжидаемый ответ:\nОрганизатор международных мероприятий; Аккаунт-менеджер\nОтвет решения:\nАккаунт-менеджер; Организатор международных мероприятий\n\n"
    },
    "533": {
        "student_solution": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True))",
        "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.",
        "correct_example": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nОрганизатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами\nОжидаемый ответ:\nОрганизатор международных мероприятий; Аккаунт-менеджер\nОтвет решения:\nОрганизатор международных мероприятий Аккаунт-менеджер\n\n"
    },
    "534": {
        "student_solution": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=true), sep = '; ')",
        "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.",
        "correct_example": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nОрганизатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\36\\codefile.py\", line 12, in <module>\n    print(*sorted(result, reverse=true), sep = '; ')\nNameError: name 'true' is not defined\n\n"
    },
    "535": {
        "student_solution": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\n    print(*sorted(result, reverse=True), sep = '; ')",
        "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.",
        "correct_example": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nОрганизатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами\nОжидаемый ответ:\nОрганизатор международных мероприятий; Аккаунт-менеджер\nОтвет решения:\nОрганизатор международных мероприятий\nОрганизатор международных мероприятий\nОрганизатор международных мероприятий; Аккаунт-менеджер\nОрганизатор международных мероприятий; Аккаунт-менеджер\n\n"
    },
    "536": {
        "student_solution": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \nif skill in skills:\n    result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.",
        "correct_example": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(': ')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nОрганизатор международных мероприятий: управление проектами, деловые коммуникации, английский язык/ Бизнес-аналитик: python, статистика/ Аккаунт-менеджер: html, управление проектами/ Менеджер по локализации: Excel, Word, английский язык \nуправление проектами\nОжидаемый ответ:\nОрганизатор международных мероприятий; Аккаунт-менеджер\nОтвет решения:\n\n\n"
    },
    "577": {
        "student_solution": "time = input()\n\n# ваш код ниже\n\nprint('В агентстве «Шедеврус» мы делаем дизайн за {time}!')",
        "task": "Реализуйте следующую программу: \n\nВ переменную time считывается строка с названием временного промежутка. Этот код уже написан.\nПрограмма должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "time = input()\n\n# ваш код ниже\n\nprint(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nнеделю\nОжидаемый ответ:\nВ агентстве «Шедеврус» мы делаем дизайн за неделю!\nОтвет решения:\nВ агентстве «Шедеврус» мы делаем дизайн за {time}!\n\n"
    },
    "578": {
        "student_solution": "time = input()\n\n# ваш код ниже\n\nprint(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!)",
        "task": "Реализуйте следующую программу: \n\nВ переменную time считывается строка с названием временного промежутка. Этот код уже написан.\nПрограмма должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "time = input()\n\n# ваш код ниже\n\nprint(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\37\\codefile.py\", line 6\n    print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!)\n                                                                                                   ^\nSyntaxError: EOL while scanning string literal\n"
    },
    "579": {
        "student_solution": "time = input()\n\n# ваш код ниже\n\nprint(fВ агентстве «Шедеврус» мы делаем дизайн за {time}!')",
        "task": "Реализуйте следующую программу: \n\nВ переменную time считывается строка с названием временного промежутка. Этот код уже написан.\nПрограмма должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "time = input()\n\n# ваш код ниже\n\nprint(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\37\\codefile.py\", line 6\n    print(fВ агентстве «Шедеврус» мы делаем дизайн за {time}!')\n              ^\nSyntaxError: invalid syntax\n"
    },
    "580": {
        "student_solution": "time = input()\n\n# ваш код ниже\n\nprint(f'В агентстве «Шедеврус» мы делаем дизайн за неделю!')",
        "task": "Реализуйте следующую программу: \n\nВ переменную time считывается строка с названием временного промежутка. Этот код уже написан.\nПрограмма должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "time = input()\n\n# ваш код ниже\n\nprint(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nдень\nОжидаемый ответ:\nВ агентстве «Шедеврус» мы делаем дизайн за день!\nОтвет решения:\nВ агентстве «Шедеврус» мы делаем дизайн за неделю!\n\n"
    },
    "581": {
        "student_solution": "time = input()\n\n# ваш код ниже\n\n    print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",
        "task": "Реализуйте следующую программу: \n\nВ переменную time считывается строка с названием временного промежутка. Этот код уже написан.\nПрограмма должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "time = input()\n\n# ваш код ниже\n\nprint(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nнеделю\nЛог:\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\37\\codefile.py\", line 6\n    print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')\nIndentationError: unexpected indent\n\n"
    },
    "582": {
        "student_solution": "time = input()\n\n# ваш код ниже\n\nprint(f'В агентстве «Шедеврус» мы делаем дизайн за time!')",
        "task": "Реализуйте следующую программу: \n\nВ переменную time считывается строка с названием временного промежутка. Этот код уже написан.\nПрограмма должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "time = input()\n\n# ваш код ниже\n\nprint(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nнеделю\nОжидаемый ответ:\nВ агентстве «Шедеврус» мы делаем дизайн за неделю!\nОтвет решения:\nВ агентстве «Шедеврус» мы делаем дизайн за time!\n\n"
    },
    "583": {
        "student_solution": "time = input()\n\n# ваш код ниже\n\nPrint(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",
        "task": "Реализуйте следующую программу: \n\nВ переменную time считывается строка с названием временного промежутка. Этот код уже написан.\nПрограмма должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "time = input()\n\n# ваш код ниже\n\nprint(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nнеделю\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\37\\codefile.py\", line 6, in <module>\n    Print(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')\nNameError: name 'Print' is not defined\n\n"
    },
    "584": {
        "student_solution": "time = input()\n\n# ваш код ниже\n\nprint(f'В агентстве «Шедеврус» мы делаем дизайн за {duration}!')",
        "task": "Реализуйте следующую программу: \n\nВ переменную time считывается строка с названием временного промежутка. Этот код уже написан.\nПрограмма должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "time = input()\n\n# ваш код ниже\n\nprint(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nнеделю\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\37\\codefile.py\", line 6, in <module>\n    print(f'В агентстве «Шедеврус» мы делаем дизайн за {duration}!')\nNameError: name 'duration' is not defined\n\n"
    },
    "585": {
        "student_solution": "time = input()\n\n# ваш код ниже\n\nprint(f\"В агентстве «Шедеврус» мы делаем дизайн за {time}!')",
        "task": "Реализуйте следующую программу: \n\nВ переменную time считывается строка с названием временного промежутка. Этот код уже написан.\nПрограмма должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "time = input()\n\n# ваш код ниже\n\nprint(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\37\\codefile.py\", line 6\n    print(f\"В агентстве «Шедеврус» мы делаем дизайн за {time}!')\n                                                                                                    ^\nSyntaxError: EOL while scanning string literal\n"
    },
    "586": {
        "student_solution": "time = input()\n\n# ваш код ниже\n\nprint(f'В агентстве «Шедеврус» мы делаем дизайн за {time}')",
        "task": "Реализуйте следующую программу: \n\nВ переменную time считывается строка с названием временного промежутка. Этот код уже написан.\nПрограмма должна вывести фразу вида 'В агентстве «Шедеврус» мы делаем дизайн за <время>!'. \nВажно! В коде обязательно нужно использовать f-строку!",
        "correct_example": "time = input()\n\n# ваш код ниже\n\nprint(f'В агентстве «Шедеврус» мы делаем дизайн за {time}!')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nнеделю\nОжидаемый ответ:\nВ агентстве «Шедеврус» мы делаем дизайн за неделю!\nОтвет решения:\nВ агентстве «Шедеврус» мы делаем дизайн за \n\n"
    },
    "587": {
        "student_solution": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('лендинг') and time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "task": "Реализуйте следующую программу:\n\nВ переменную order считывается строка вида \"<заказ>;<стоимость в рублях>;<компания-заказчик>\". Этот код уже написан.\nВ переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.\nПрограмма должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова \"Лендинг\".\nЕсли условия выполняются, программа печатает фразу \"Берем заказ в работу\". Эта фраза сохранена для вас в переменную work.\nВ остальных случаях программа печатает фразу \"Отказываем заказчику\". Эта строка сохранена для вас в переменную reject.",
        "correct_example": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nЛендинг;7800;InfoSerf\n11\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\38\\codefile.py\", line 7, in <module>\n    time = int(input())\nEOFError: EOF when reading a line\n\n"
    },
    "588": {
        "student_solution": "order = input()\ntime = input()\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "task": "Реализуйте следующую программу:\n\nВ переменную order считывается строка вида \"<заказ>;<стоимость в рублях>;<компания-заказчик>\". Этот код уже написан.\nВ переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.\nПрограмма должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова \"Лендинг\".\nЕсли условия выполняются, программа печатает фразу \"Берем заказ в работу\". Эта фраза сохранена для вас в переменную work.\nВ остальных случаях программа печатает фразу \"Отказываем заказчику\". Эта строка сохранена для вас в переменную reject.",
        "correct_example": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nЛендинг;7800;InfoSerf\n11\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\38\\codefile.py\", line 7, in <module>\n    time = input()\nEOFError: EOF when reading a line\n\n"
    },
    "589": {
        "student_solution": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.endswith('Лендинг') and time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "task": "Реализуйте следующую программу:\n\nВ переменную order считывается строка вида \"<заказ>;<стоимость в рублях>;<компания-заказчик>\". Этот код уже написан.\nВ переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.\nПрограмма должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова \"Лендинг\".\nЕсли условия выполняются, программа печатает фразу \"Берем заказ в работу\". Эта фраза сохранена для вас в переменную work.\nВ остальных случаях программа печатает фразу \"Отказываем заказчику\". Эта строка сохранена для вас в переменную reject.",
        "correct_example": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nЛендинг;7800;InfoSerf\n11\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\38\\codefile.py\", line 7, in <module>\n    time = int(input())\nEOFError: EOF when reading a line\n\n"
    },
    "590": {
        "student_solution": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') & time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "task": "Реализуйте следующую программу:\n\nВ переменную order считывается строка вида \"<заказ>;<стоимость в рублях>;<компания-заказчик>\". Этот код уже написан.\nВ переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.\nПрограмма должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова \"Лендинг\".\nЕсли условия выполняются, программа печатает фразу \"Берем заказ в работу\". Эта фраза сохранена для вас в переменную work.\nВ остальных случаях программа печатает фразу \"Отказываем заказчику\". Эта строка сохранена для вас в переменную reject.",
        "correct_example": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nЛендинг;7800;InfoSerf\n11\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\38\\codefile.py\", line 7, in <module>\n    time = int(input())\nEOFError: EOF when reading a line\n\n"
    },
    "591": {
        "student_solution": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') or time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "task": "Реализуйте следующую программу:\n\nВ переменную order считывается строка вида \"<заказ>;<стоимость в рублях>;<компания-заказчик>\". Этот код уже написан.\nВ переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.\nПрограмма должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова \"Лендинг\".\nЕсли условия выполняются, программа печатает фразу \"Берем заказ в работу\". Эта фраза сохранена для вас в переменную work.\nВ остальных случаях программа печатает фразу \"Отказываем заказчику\". Эта строка сохранена для вас в переменную reject.",
        "correct_example": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nЛендинг;7800;InfoSerf\n11\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\38\\codefile.py\", line 7, in <module>\n    time = int(input())\nEOFError: EOF when reading a line\n\n"
    },
    "592": {
        "student_solution": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг'): \n    print(work)\nelif time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "task": "Реализуйте следующую программу:\n\nВ переменную order считывается строка вида \"<заказ>;<стоимость в рублях>;<компания-заказчик>\". Этот код уже написан.\nВ переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.\nПрограмма должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова \"Лендинг\".\nЕсли условия выполняются, программа печатает фразу \"Берем заказ в работу\". Эта фраза сохранена для вас в переменную work.\nВ остальных случаях программа печатает фразу \"Отказываем заказчику\". Эта строка сохранена для вас в переменную reject.",
        "correct_example": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nЛендинг;7800;InfoSerf\n11\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\38\\codefile.py\", line 7, in <module>\n    time = int(input())\nEOFError: EOF when reading a line\n\n"
    },
    "593": {
        "student_solution": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time < 10:\n    print(work)\nelse:\n    print(reject)",
        "task": "Реализуйте следующую программу:\n\nВ переменную order считывается строка вида \"<заказ>;<стоимость в рублях>;<компания-заказчик>\". Этот код уже написан.\nВ переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.\nПрограмма должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова \"Лендинг\".\nЕсли условия выполняются, программа печатает фразу \"Берем заказ в работу\". Эта фраза сохранена для вас в переменную work.\nВ остальных случаях программа печатает фразу \"Отказываем заказчику\". Эта строка сохранена для вас в переменную reject.",
        "correct_example": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nЛендинг;7800;InfoSerf\n11\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\38\\codefile.py\", line 7, in <module>\n    time = int(input())\nEOFError: EOF when reading a line\n\n"
    },
    "594": {
        "student_solution": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг'):\n    print(work)\nelse:\n    print(reject)",
        "task": "Реализуйте следующую программу:\n\nВ переменную order считывается строка вида \"<заказ>;<стоимость в рублях>;<компания-заказчик>\". Этот код уже написан.\nВ переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.\nПрограмма должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова \"Лендинг\".\nЕсли условия выполняются, программа печатает фразу \"Берем заказ в работу\". Эта фраза сохранена для вас в переменную work.\nВ остальных случаях программа печатает фразу \"Отказываем заказчику\". Эта строка сохранена для вас в переменную reject.",
        "correct_example": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nЛендинг;7800;InfoSerf\n11\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\38\\codefile.py\", line 7, in <module>\n    time = int(input())\nEOFError: EOF when reading a line\n\n"
    },
    "595": {
        "student_solution": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "task": "Реализуйте следующую программу:\n\nВ переменную order считывается строка вида \"<заказ>;<стоимость в рублях>;<компания-заказчик>\". Этот код уже написан.\nВ переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.\nПрограмма должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова \"Лендинг\".\nЕсли условия выполняются, программа печатает фразу \"Берем заказ в работу\". Эта фраза сохранена для вас в переменную work.\nВ остальных случаях программа печатает фразу \"Отказываем заказчику\". Эта строка сохранена для вас в переменную reject.",
        "correct_example": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nЛендинг;7800;InfoSerf\n11\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\38\\codefile.py\", line 7, in <module>\n    time = int(input())\nEOFError: EOF when reading a line\n\n"
    },
    "596": {
        "student_solution": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(work)",
        "task": "Реализуйте следующую программу:\n\nВ переменную order считывается строка вида \"<заказ>;<стоимость в рублях>;<компания-заказчик>\". Этот код уже написан.\nВ переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.\nПрограмма должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова \"Лендинг\".\nЕсли условия выполняются, программа печатает фразу \"Берем заказ в работу\". Эта фраза сохранена для вас в переменную work.\nВ остальных случаях программа печатает фразу \"Отказываем заказчику\". Эта строка сохранена для вас в переменную reject.",
        "correct_example": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nЛендинг;7800;InfoSerf\n11\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\38\\codefile.py\", line 7, in <module>\n    time = int(input())\nEOFError: EOF when reading a line\n\n"
    },
    "597": {
        "student_solution": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(work)\nelse\n    print(reject)",
        "task": "Реализуйте следующую программу:\n\nВ переменную order считывается строка вида \"<заказ>;<стоимость в рублях>;<компания-заказчик>\". Этот код уже написан.\nВ переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.\nПрограмма должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова \"Лендинг\".\nЕсли условия выполняются, программа печатает фразу \"Берем заказ в работу\". Эта фраза сохранена для вас в переменную work.\nВ остальных случаях программа печатает фразу \"Отказываем заказчику\". Эта строка сохранена для вас в переменную reject.",
        "correct_example": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\38\\codefile.py\", line 16\n    else\n        ^\nSyntaxError: invalid syntax\n"
    },
    "598": {
        "student_solution": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(wok)\nelse:\n    print(reject)",
        "task": "Реализуйте следующую программу:\n\nВ переменную order считывается строка вида \"<заказ>;<стоимость в рублях>;<компания-заказчик>\". Этот код уже написан.\nВ переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.\nПрограмма должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова \"Лендинг\".\nЕсли условия выполняются, программа печатает фразу \"Берем заказ в работу\". Эта фраза сохранена для вас в переменную work.\nВ остальных случаях программа печатает фразу \"Отказываем заказчику\". Эта строка сохранена для вас в переменную reject.",
        "correct_example": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nЛендинг;7800;InfoSerf\n11\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\38\\codefile.py\", line 7, in <module>\n    time = int(input())\nEOFError: EOF when reading a line\n\n"
    },
    "599": {
        "student_solution": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(work)\nelse:\nprint(reject)",
        "task": "Реализуйте следующую программу:\n\nВ переменную order считывается строка вида \"<заказ>;<стоимость в рублях>;<компания-заказчик>\". Этот код уже написан.\nВ переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.\nПрограмма должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова \"Лендинг\".\nЕсли условия выполняются, программа печатает фразу \"Берем заказ в работу\". Эта фраза сохранена для вас в переменную work.\nВ остальных случаях программа печатает фразу \"Отказываем заказчику\". Эта строка сохранена для вас в переменную reject.",
        "correct_example": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nЛендинг;7800;InfoSerf\n11\nЛог:\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\38\\codefile.py\", line 17\n    print(reject)\n    ^\nIndentationError: expected an indented block\n\n"
    },
    "600": {
        "student_solution": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(reject)\nelse:\n    print(work)",
        "task": "Реализуйте следующую программу:\n\nВ переменную order считывается строка вида \"<заказ>;<стоимость в рублях>;<компания-заказчик>\". Этот код уже написан.\nВ переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.\nПрограмма должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова \"Лендинг\".\nЕсли условия выполняются, программа печатает фразу \"Берем заказ в работу\". Эта фраза сохранена для вас в переменную work.\nВ остальных случаях программа печатает фразу \"Отказываем заказчику\". Эта строка сохранена для вас в переменную reject.",
        "correct_example": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time <= 10:\n    print(work)\nelse:\n    print(reject)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nЛендинг;7800;InfoSerf\n11\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\38\\codefile.py\", line 7, in <module>\n    time = int(input())\nEOFError: EOF when reading a line\n\n"
    },
    "641": {
        "student_solution": "font = input()\n\nfor k,v in design.items():\n    if font in v:\n        used.append(k)\n        \nprint(used)",
        "task": "Реализуйте следующую программу:\n\nДан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.\nВ переменную font считывается название шрифта. \nОпределите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. \nЕсли таких дизайнеров нет, должен печататься пустой список.",
        "correct_example": "design = {\n    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],\n    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],\n    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],\n    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],\n    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']\n}\n\nfont = input()\nused = []\n\nfor k,v in design.items():\n    if font in v:\n        used.append(k)\n        \nprint(used)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nCourier New\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\39\\codefile.py\", line 12, in <module>\n    used.append(k)\nNameError: name 'used' is not defined\n\n"
    },
    "642": {
        "student_solution": "font = input()\nused = []\n\nfor k,v in design:\n    if font in v:\n        used.append(k)\n        \nprint(used)",
        "task": "Реализуйте следующую программу:\n\nДан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.\nВ переменную font считывается название шрифта. \nОпределите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. \nЕсли таких дизайнеров нет, должен печататься пустой список.",
        "correct_example": "design = {\n    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],\n    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],\n    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],\n    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],\n    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']\n}\n\nfont = input()\nused = []\n\nfor k,v in design.items():\n    if font in v:\n        used.append(k)\n        \nprint(used)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nCourier New\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\39\\codefile.py\", line 11, in <module>\n    for k,v in design:\nValueError: too many values to unpack (expected 2)\n\n"
    },
    "643": {
        "student_solution": "font = input()\nused = []\n\nfor key,value in design.items():\n    if font in v:\n        used.append(k)\n        \nprint(used)",
        "task": "Реализуйте следующую программу:\n\nДан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.\nВ переменную font считывается название шрифта. \nОпределите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. \nЕсли таких дизайнеров нет, должен печататься пустой список.",
        "correct_example": "design = {\n    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],\n    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],\n    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],\n    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],\n    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']\n}\n\nfont = input()\nused = []\n\nfor k,v in design.items():\n    if font in v:\n        used.append(k)\n        \nprint(used)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nCourier New\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\39\\codefile.py\", line 12, in <module>\n    if font in v:\nNameError: name 'v' is not defined\n\n"
    },
    "644": {
        "student_solution": "font = input()\nused = []\n\nfor k,v in design.items():\n    if font in k:\n        used.append(v)\n        \nprint(used)",
        "task": "Реализуйте следующую программу:\n\nДан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.\nВ переменную font считывается название шрифта. \nОпределите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. \nЕсли таких дизайнеров нет, должен печататься пустой список.",
        "correct_example": "design = {\n    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],\n    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],\n    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],\n    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],\n    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']\n}\n\nfont = input()\nused = []\n\nfor k,v in design.items():\n    if font in v:\n        used.append(k)\n        \nprint(used)",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nCourier New\nОжидаемый ответ:\n['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов']\nОтвет решения:\n[]\n\n"
    },
    "645": {
        "student_solution": "font = input()\nused = []\n\nfor k,v in design.items():\n    if font not in v:\n        used.append(k)\n        \nprint(used)",
        "task": "Реализуйте следующую программу:\n\nДан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.\nВ переменную font считывается название шрифта. \nОпределите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. \nЕсли таких дизайнеров нет, должен печататься пустой список.",
        "correct_example": "design = {\n    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],\n    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],\n    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],\n    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],\n    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']\n}\n\nfont = input()\nused = []\n\nfor k,v in design.items():\n    if font in v:\n        used.append(k)\n        \nprint(used)",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nCourier New\nОжидаемый ответ:\n['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов']\nОтвет решения:\n['Анастасия Соколова', 'Мария Петрова']\n\n"
    },
    "646": {
        "student_solution": "font = input()\nused = []\n\nfor k,v in design.items():\n    if font in v:\n        used.add(k)\n        \nprint(used)",
        "task": "Реализуйте следующую программу:\n\nДан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.\nВ переменную font считывается название шрифта. \nОпределите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. \nЕсли таких дизайнеров нет, должен печататься пустой список.",
        "correct_example": "design = {\n    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],\n    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],\n    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],\n    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],\n    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']\n}\n\nfont = input()\nused = []\n\nfor k,v in design.items():\n    if font in v:\n        used.append(k)\n        \nprint(used)",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nCourier New\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\39\\codefile.py\", line 13, in <module>\n    used.add(k)\nAttributeError: 'list' object has no attribute 'add'\n\n"
    },
    "647": {
        "student_solution": "font = input()\nused = []\n\nfor k,v in design.items():\n    if font in v\n        used.append(k)\n        \nprint(used)",
        "task": "Реализуйте следующую программу:\n\nДан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.\nВ переменную font считывается название шрифта. \nОпределите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. \nЕсли таких дизайнеров нет, должен печататься пустой список.",
        "correct_example": "design = {\n    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],\n    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],\n    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],\n    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],\n    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']\n}\n\nfont = input()\nused = []\n\nfor k,v in design.items():\n    if font in v:\n        used.append(k)\n        \nprint(used)",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\39\\codefile.py\", line 12\n    if font in v\n                ^\nSyntaxError: invalid syntax\n"
    },
    "648": {
        "student_solution": "font = input()\nused = []\n\nfor k,v in design.items():\n    if font in v:\n        used.append(k)\n        \nprint(sorted(used))",
        "task": "Реализуйте следующую программу:\n\nДан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.\nВ переменную font считывается название шрифта. \nОпределите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. \nЕсли таких дизайнеров нет, должен печататься пустой список.",
        "correct_example": "design = {\n    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],\n    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],\n    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],\n    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],\n    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']\n}\n\nfont = input()\nused = []\n\nfor k,v in design.items():\n    if font in v:\n        used.append(k)\n        \nprint(used)",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nCourier New\nОжидаемый ответ:\n['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов']\nОтвет решения:\n['Дмитрий Михайлов', 'Екатерина Васильева', 'Ольга Кузнецова']\n\n"
    },
    "649": {
        "student_solution": "font = input()\nused = []\n\nfor k,v in design.items():\n    if font in v:\n        used.append(k)\n        \nprint(*used)",
        "task": "Реализуйте следующую программу:\n\nДан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.\nВ переменную font считывается название шрифта. \nОпределите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. \nЕсли таких дизайнеров нет, должен печататься пустой список.",
        "correct_example": "design = {\n    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],\n    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],\n    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],\n    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],\n    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']\n}\n\nfont = input()\nused = []\n\nfor k,v in design.items():\n    if font in v:\n        used.append(k)\n        \nprint(used)",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nCourier New\nОжидаемый ответ:\n['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов']\nОтвет решения:\nЕкатерина Васильева Ольга Кузнецова Дмитрий Михайлов\n\n"
    },
    "650": {
        "student_solution": "font = input()\nused = []\n\nfor k,v in design.items():\n    if font in v:\n        used.append(k)\n        \n    print(used)",
        "task": "Реализуйте следующую программу:\n\nДан словарь design, где ключи — это имена и фамилии дизайнеров, а значения — списки со шрифтами, которые они используют в своих работах. Этот код уже написан.\nВ переменную font считывается название шрифта. \nОпределите, какие дизайнеры используют этот шрифт и напечатайте список этих дизайнеров. Имена и фамилии дизайнеров должны идти в том же порядке, как они встречаются в словаре. \nЕсли таких дизайнеров нет, должен печататься пустой список.",
        "correct_example": "design = {\n    'Екатерина Васильева': ['Baskerville Old Face', 'Lucida Bright', 'Monotype Corsiva', 'Courier New'],\n    'Анастасия Соколова': ['Old English Text MT', 'Zapf Dingbats', 'Brush Script Std'],\n    'Ольга Кузнецова': ['Lucida Sans Unicode', 'Tahoma', 'Courier New', 'Palatino Linotype'],\n    'Дмитрий Михайлов': ['Arial Black', 'Garamond', 'Lucida Console', 'Courier New', 'Tahoma'],\n    'Мария Петрова': ['Arial', 'Calibri', 'Monotype Corsiva']\n}\n\nfont = input()\nused = []\n\nfor k,v in design.items():\n    if font in v:\n        used.append(k)\n        \nprint(used)",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nCourier New\nОжидаемый ответ:\n['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов']\nОтвет решения:\n['Екатерина Васильева']\n['Екатерина Васильева']\n['Екатерина Васильева', 'Ольга Кузнецова']\n['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов']\n['Екатерина Васильева', 'Ольга Кузнецова', 'Дмитрий Михайлов']\n\n"
    },
    "651": {
        "student_solution": "def best_agencies(names, count)\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)",
        "task": "Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.\n\nОпределите функцию best_agencies, которая принимает на вход две строки:\nв первой строке через запятую и пробел перечислены названия агентств;\nво второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.\nГарантируется, что названия агентств не повторяются.\nФункция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. \nГарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.",
        "correct_example": "names, count = eval(input())\ndef best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)\nprint(best_agencies(names, count))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\40\\codefile.py\", line 2\n    def best_agencies(names, count)\n                                   ^\nSyntaxError: invalid syntax\n"
    },
    "652": {
        "student_solution": "def best_agencies():\n    names = input().split(', ')\n    count = list(map(int, input().split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)",
        "task": "Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.\n\nОпределите функцию best_agencies, которая принимает на вход две строки:\nв первой строке через запятую и пробел перечислены названия агентств;\nво второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.\nГарантируется, что названия агентств не повторяются.\nФункция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. \nГарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.",
        "correct_example": "names, count = eval(input())\ndef best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)\nprint(best_agencies(names, count))",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\40\\codefile.py\", line 13, in <module>\n    print(best_agencies(names, count))\nTypeError: best_agencies() takes 0 positional arguments but 2 were given\n\n"
    },
    "653": {
        "student_solution": "def best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(name)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)",
        "task": "Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.\n\nОпределите функцию best_agencies, которая принимает на вход две строки:\nв первой строке через запятую и пробел перечислены названия агентств;\nво второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.\nГарантируется, что названия агентств не повторяются.\nФункция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. \nГарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.",
        "correct_example": "names, count = eval(input())\ndef best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)\nprint(best_agencies(names, count))",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\40\\codefile.py\", line 13, in <module>\n    print(best_agencies(names, count))\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\40\\codefile.py\", line 8, in best_agencies\n    for idx in range(len(name)):\nNameError: name 'name' is not defined\n\n"
    },
    "654": {
        "student_solution": "def best_agencies(names, count):\n    names = names.split(',')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)",
        "task": "Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.\n\nОпределите функцию best_agencies, которая принимает на вход две строки:\nв первой строке через запятую и пробел перечислены названия агентств;\nво второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.\nГарантируется, что названия агентств не повторяются.\nФункция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. \nГарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.",
        "correct_example": "names, count = eval(input())\ndef best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)\nprint(best_agencies(names, count))",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'\nОжидаемый ответ:\n['Авангардус', 'Виртуус', 'Креатус']\nОтвет решения:\n[' Авангардус', ' Виртуус', ' Креатус']\n\n"
    },
    "655": {
        "student_solution": "def best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)",
        "task": "Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.\n\nОпределите функцию best_agencies, которая принимает на вход две строки:\nв первой строке через запятую и пробел перечислены названия агентств;\nво второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.\nГарантируется, что названия агентств не повторяются.\nФункция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. \nГарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.",
        "correct_example": "names, count = eval(input())\ndef best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)\nprint(best_agencies(names, count))",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\40\\codefile.py\", line 13, in <module>\n    print(best_agencies(names, count))\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\40\\codefile.py\", line 4, in best_agencies\n    count = list(map(int, count))\nValueError: invalid literal for int() with base 10: ','\n\n"
    },
    "656": {
        "student_solution": "def best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)",
        "task": "Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.\n\nОпределите функцию best_agencies, которая принимает на вход две строки:\nв первой строке через запятую и пробел перечислены названия агентств;\nво второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.\nГарантируется, что названия агентств не повторяются.\nФункция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. \nГарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.",
        "correct_example": "names, count = eval(input())\ndef best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)\nprint(best_agencies(names, count))",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\40\\codefile.py\", line 13, in <module>\n    print(best_agencies(names, count))\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\40\\codefile.py\", line 4, in best_agencies\n    count = list(map(count.split(', ')))\nTypeError: map() must have at least two arguments.\n\n"
    },
    "657": {
        "student_solution": "def best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    print(sorted(agency))",
        "task": "Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.\n\nОпределите функцию best_agencies, которая принимает на вход две строки:\nв первой строке через запятую и пробел перечислены названия агентств;\nво второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.\nГарантируется, что названия агентств не повторяются.\nФункция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. \nГарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.",
        "correct_example": "names, count = eval(input())\ndef best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)\nprint(best_agencies(names, count))",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'\nОжидаемый ответ:\n['Авангардус', 'Виртуус', 'Креатус']\nОтвет решения:\n['Авангардус', 'Виртуус', 'Креатус']\nNone\n\n"
    },
    "658": {
        "student_solution": "def best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n        \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)",
        "task": "Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.\n\nОпределите функцию best_agencies, которая принимает на вход две строки:\nв первой строке через запятую и пробел перечислены названия агентств;\nво второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.\nГарантируется, что названия агентств не повторяются.\nФункция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. \nГарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.",
        "correct_example": "names, count = eval(input())\ndef best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)\nprint(best_agencies(names, count))",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\40\\codefile.py\", line 11, in <module>\n    print(best_agencies(names, count))\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\40\\codefile.py\", line 8, in best_agencies\n    agency.append(names[idx])\nNameError: name 'agency' is not defined\n\n"
    },
    "659": {
        "student_solution": "def best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(names):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)",
        "task": "Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.\n\nОпределите функцию best_agencies, которая принимает на вход две строки:\nв первой строке через запятую и пробел перечислены названия агентств;\nво второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.\nГарантируется, что названия агентств не повторяются.\nФункция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. \nГарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.",
        "correct_example": "names, count = eval(input())\ndef best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)\nprint(best_agencies(names, count))",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\40\\codefile.py\", line 13, in <module>\n    print(best_agencies(names, count))\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\40\\codefile.py\", line 8, in best_agencies\n    for idx in range(names):\nTypeError: 'list' object cannot be interpreted as an integer\n\n"
    },
    "660": {
        "student_solution": "def best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in len(names):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)",
        "task": "Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.\n\nОпределите функцию best_agencies, которая принимает на вход две строки:\nв первой строке через запятую и пробел перечислены названия агентств;\nво второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.\nГарантируется, что названия агентств не повторяются.\nФункция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. \nГарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.",
        "correct_example": "names, count = eval(input())\ndef best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)\nprint(best_agencies(names, count))",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\40\\codefile.py\", line 13, in <module>\n    print(best_agencies(names, count))\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\40\\codefile.py\", line 8, in best_agencies\n    for idx in len(names):\nTypeError: 'int' object is not iterable\n\n"
    },
    "661": {
        "student_solution": "def best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] > 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)",
        "task": "Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.\n\nОпределите функцию best_agencies, которая принимает на вход две строки:\nв первой строке через запятую и пробел перечислены названия агентств;\nво второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.\nГарантируется, что названия агентств не повторяются.\nФункция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. \nГарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.",
        "correct_example": "names, count = eval(input())\ndef best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)\nprint(best_agencies(names, count))",
        "tester_report": "Не удалось протостировать решение"
    },
    "662": {
        "student_solution": "def best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.add(names[idx])\n    \n    return sorted(agency)",
        "task": "Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.\n\nОпределите функцию best_agencies, которая принимает на вход две строки:\nв первой строке через запятую и пробел перечислены названия агентств;\nво второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.\nГарантируется, что названия агентств не повторяются.\nФункция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. \nГарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.",
        "correct_example": "names, count = eval(input())\ndef best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)\nprint(best_agencies(names, count))",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\n'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\40\\codefile.py\", line 13, in <module>\n    print(best_agencies(names, count))\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\40\\codefile.py\", line 10, in best_agencies\n    agency.add(names[idx])\nAttributeError: 'list' object has no attribute 'add'\n\n"
    },
    "663": {
        "student_solution": "def best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return agency",
        "task": "Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.\n\nОпределите функцию best_agencies, которая принимает на вход две строки:\nв первой строке через запятую и пробел перечислены названия агентств;\nво второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.\nГарантируется, что названия агентств не повторяются.\nФункция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. \nГарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.",
        "correct_example": "names, count = eval(input())\ndef best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)\nprint(best_agencies(names, count))",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'\nОжидаемый ответ:\n['Авангардус', 'Виртуус', 'Креатус']\nОтвет решения:\n['Креатус', 'Авангардус', 'Виртуус']\n\n"
    },
    "664": {
        "student_solution": "def best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency, reverse = True)",
        "task": "Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.\n\nОпределите функцию best_agencies, которая принимает на вход две строки:\nв первой строке через запятую и пробел перечислены названия агентств;\nво второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.\nГарантируется, что названия агентств не повторяются.\nФункция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. \nГарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.",
        "correct_example": "names, count = eval(input())\ndef best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)\nprint(best_agencies(names, count))",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'\nОжидаемый ответ:\n['Авангардус', 'Виртуус', 'Креатус']\nОтвет решения:\n['Креатус', 'Виртуус', 'Авангардус']\n\n"
    },
    "665": {
        "student_solution": "def best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:    \n            return sorted(names[idx])",
        "task": "Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.\n\nОпределите функцию best_agencies, которая принимает на вход две строки:\nв первой строке через запятую и пробел перечислены названия агентств;\nво второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.\nГарантируется, что названия агентств не повторяются.\nФункция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. \nГарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.",
        "correct_example": "names, count = eval(input())\ndef best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)\nprint(best_agencies(names, count))",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'\nОжидаемый ответ:\n['Авангардус', 'Виртуус', 'Креатус']\nОтвет решения:\n['К', 'а', 'е', 'р', 'с', 'т', 'у']\n\n"
    },
    "666": {
        "student_solution": "def best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    print(sorted(agency))",
        "task": "Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.\n\nОпределите функцию best_agencies, которая принимает на вход две строки:\nв первой строке через запятую и пробел перечислены названия агентств;\nво второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.\nГарантируется, что названия агентств не повторяются.\nФункция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. \nГарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.",
        "correct_example": "names, count = eval(input())\ndef best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] >= 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)\nprint(best_agencies(names, count))",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\n'Эстетус, Креатус, Авангардус, Эксклюзивус, Виртуус', '320, 580, 537, 432, 599'\nОжидаемый ответ:\n['Авангардус', 'Виртуус', 'Креатус']\nОтвет решения:\n['Авангардус', 'Виртуус', 'Креатус']\nNone\n\n"
    },
    "682": {
        "student_solution": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = '{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "task": "Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одной выставке.\nФОРМАТ ВЫВОДА \nСписок из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную для сохранения количества отзывов для каждой выставки.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.\nОтсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.",
        "correct_example": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nмои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\41\\codefile.py\", line 10, in <module>\n    review = int(exh.split(': ')[1])\nIndexError: list index out of range\n\n"
    },
    "683": {
        "student_solution": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "task": "Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одной выставке.\nФОРМАТ ВЫВОДА \nСписок из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную для сохранения количества отзывов для каждой выставки.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.\nОтсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.",
        "correct_example": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\41\\codefile.py\", line 6\n    res = f'{e1}, {e2}, {e3}.split(', ')\n                                        ^\nSyntaxError: EOL while scanning string literal\n"
    },
    "684": {
        "student_solution": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'e1, e2, e3'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "task": "Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одной выставке.\nФОРМАТ ВЫВОДА \nСписок из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную для сохранения количества отзывов для каждой выставки.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.\nОтсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.",
        "correct_example": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nмои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\41\\codefile.py\", line 10, in <module>\n    review = int(exh.split(': ')[1])\nIndexError: list index out of range\n\n"
    },
    "685": {
        "student_solution": "e = input()\ne1 = input()\ne2 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "task": "Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одной выставке.\nФОРМАТ ВЫВОДА \nСписок из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную для сохранения количества отзывов для каждой выставки.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.\nОтсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.",
        "correct_example": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nмои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\41\\codefile.py\", line 6, in <module>\n    res = f'{e1}, {e2}, {e3}'.split(', ')\nNameError: name 'e3' is not defined\n\n"
    },
    "686": {
        "student_solution": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(',')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "task": "Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одной выставке.\nФОРМАТ ВЫВОДА \nСписок из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную для сохранения количества отзывов для каждой выставки.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.\nОтсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.",
        "correct_example": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "tester_report": "Не удалось протостировать решение"
    },
    "687": {
        "student_solution": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "task": "Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одной выставке.\nФОРМАТ ВЫВОДА \nСписок из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную для сохранения количества отзывов для каждой выставки.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.\nОтсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.",
        "correct_example": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nмои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\41\\codefile.py\", line 10, in <module>\n    review = int(exh.split(': ')[1])\nIndexError: list index out of range\n\n"
    },
    "688": {
        "student_solution": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "task": "Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одной выставке.\nФОРМАТ ВЫВОДА \nСписок из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную для сохранения количества отзывов для каждой выставки.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.\nОтсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.",
        "correct_example": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nмои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\41\\codefile.py\", line 10, in <module>\n    cnt.append(int(review))\nNameError: name 'cnt' is not defined\n\n"
    },
    "689": {
        "student_solution": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor i in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "task": "Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одной выставке.\nФОРМАТ ВЫВОДА \nСписок из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную для сохранения количества отзывов для каждой выставки.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.\nОтсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.",
        "correct_example": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nмои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\41\\codefile.py\", line 10, in <module>\n    review = int(exh.split(': ')[1])\nNameError: name 'exh' is not defined\n\n"
    },
    "690": {
        "student_solution": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(':')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "task": "Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одной выставке.\nФОРМАТ ВЫВОДА \nСписок из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную для сохранения количества отзывов для каждой выставки.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.\nОтсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.",
        "correct_example": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "tester_report": "Не удалось протостировать решение"
    },
    "691": {
        "student_solution": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = exh.split(': ')[1]\n    cnt.append(review)\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "task": "Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одной выставке.\nФОРМАТ ВЫВОДА \nСписок из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную для сохранения количества отзывов для каждой выставки.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.\nОтсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.",
        "correct_example": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nмои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346\nОжидаемый ответ:\n[1346, 450]\nОтвет решения:\n['92', '450']\n\n"
    },
    "692": {
        "student_solution": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.add(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "task": "Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одной выставке.\nФОРМАТ ВЫВОДА \nСписок из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную для сохранения количества отзывов для каждой выставки.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.\nОтсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.",
        "correct_example": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nмои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\41\\codefile.py\", line 11, in <module>\n    cnt.add(int(review))\nAttributeError: 'list' object has no attribute 'add'\n\n"
    },
    "693": {
        "student_solution": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[0])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "task": "Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одной выставке.\nФОРМАТ ВЫВОДА \nСписок из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную для сохранения количества отзывов для каждой выставки.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.\nОтсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.",
        "correct_example": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nмои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\41\\codefile.py\", line 10, in <module>\n    review = int(exh.split(': ')[0])\nValueError: invalid literal for int() with base 10: 'мои печали'\n\n"
    },
    "694": {
        "student_solution": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(cnt)",
        "task": "Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одной выставке.\nФОРМАТ ВЫВОДА \nСписок из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную для сохранения количества отзывов для каждой выставки.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.\nОтсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.",
        "correct_example": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nмои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346\nОжидаемый ответ:\n[1346, 450]\nОтвет решения:\n[23, 450, 321, 92, 45, 134, 21, 1346]\n\n"
    },
    "695": {
        "student_solution": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt))",
        "task": "Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одной выставке.\nФОРМАТ ВЫВОДА \nСписок из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную для сохранения количества отзывов для каждой выставки.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.\nОтсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.",
        "correct_example": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nмои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346\nОжидаемый ответ:\n[1346, 450]\nОтвет решения:\n[21, 23, 45, 92, 134, 321, 450, 1346]\n\n"
    },
    "696": {
        "student_solution": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt)[:2])",
        "task": "Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одной выставке.\nФОРМАТ ВЫВОДА \nСписок из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную для сохранения количества отзывов для каждой выставки.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.\nОтсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.",
        "correct_example": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nмои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346\nОжидаемый ответ:\n[1346, 450]\nОтвет решения:\n[21, 23]\n\n"
    },
    "697": {
        "student_solution": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True))",
        "task": "Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одной выставке.\nФОРМАТ ВЫВОДА \nСписок из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную для сохранения количества отзывов для каждой выставки.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.\nОтсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.",
        "correct_example": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nмои печали: 23, пять комнат: 450, ангел летящий: 321\nикар: 92, свет твоих окон: 45\nбуря: 134, отражение: 21, л-ю-б-о-в-ь: 1346\nОжидаемый ответ:\n[1346, 450]\nОтвет решения:\n[1346, 450, 321, 134, 92, 45, 23, 21]\n\n"
    },
    "698": {
        "student_solution": "data = input()\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "task": "Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.\n\nФОРМАТ ВВОДА\nНа первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. \nНа второй строке вводится месяц, в который Алина хочет провести выставку.\nФОРМАТ ВЫВОДА\nНазвания музеев, которые устраивают Алину (где она может провести выставку).\nНазвания должны выводиться через запятую и пробел в алфавитном порядке.\nЕсли таких музеев нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.\nСчитайте в переменную название месяца.\nСоздайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;\nесли месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.\nОтсортируйте получившийся список в алфавитном порядке. \nНапечатайте элементы списка через запятую и пробел.",
        "correct_example": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nНовая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\42\\codefile.py\", line 8, in <module>\n    museum, avail = info.split(': ')\nValueError: not enough values to unpack (expected 2, got 1)\n\n"
    },
    "699": {
        "student_solution": "data = input().split('; ')\nmonth = input()\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "task": "Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.\n\nФОРМАТ ВВОДА\nНа первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. \nНа второй строке вводится месяц, в который Алина хочет провести выставку.\nФОРМАТ ВЫВОДА\nНазвания музеев, которые устраивают Алину (где она может провести выставку).\nНазвания должны выводиться через запятую и пробел в алфавитном порядке.\nЕсли таких музеев нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.\nСчитайте в переменную название месяца.\nСоздайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;\nесли месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.\nОтсортируйте получившийся список в алфавитном порядке. \nНапечатайте элементы списка через запятую и пробел.",
        "correct_example": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nНовая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\42\\codefile.py\", line 9, in <module>\n    result.append(museum)\nNameError: name 'result' is not defined\n\n"
    },
    "700": {
        "student_solution": "data = input().split(';')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "task": "Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.\n\nФОРМАТ ВВОДА\nНа первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. \nНа второй строке вводится месяц, в который Алина хочет провести выставку.\nФОРМАТ ВЫВОДА\nНазвания музеев, которые устраивают Алину (где она может провести выставку).\nНазвания должны выводиться через запятую и пробел в алфавитном порядке.\nЕсли таких музеев нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.\nСчитайте в переменную название месяца.\nСоздайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;\nесли месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.\nОтсортируйте получившийся список в алфавитном порядке. \nНапечатайте элементы списка через запятую и пробел.",
        "correct_example": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nНовая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст\nОжидаемый ответ:\nМузей изобразительных искусств, Новая Третьяковка, Пушкинский музей\nОтвет решения:\n Музей изобразительных искусств,  Пушкинский музей, Новая Третьяковка\n\n"
    },
    "701": {
        "student_solution": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor i in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "task": "Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.\n\nФОРМАТ ВВОДА\nНа первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. \nНа второй строке вводится месяц, в который Алина хочет провести выставку.\nФОРМАТ ВЫВОДА\nНазвания музеев, которые устраивают Алину (где она может провести выставку).\nНазвания должны выводиться через запятую и пробел в алфавитном порядке.\nЕсли таких музеев нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.\nСчитайте в переменную название месяца.\nСоздайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;\nесли месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.\nОтсортируйте получившийся список в алфавитном порядке. \nНапечатайте элементы списка через запятую и пробел.",
        "correct_example": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nНовая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\42\\codefile.py\", line 8, in <module>\n    museum, avail = info.split(': ')\nNameError: name 'info' is not defined\n\n"
    },
    "702": {
        "student_solution": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "task": "Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.\n\nФОРМАТ ВВОДА\nНа первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. \nНа второй строке вводится месяц, в который Алина хочет провести выставку.\nФОРМАТ ВЫВОДА\nНазвания музеев, которые устраивают Алину (где она может провести выставку).\nНазвания должны выводиться через запятую и пробел в алфавитном порядке.\nЕсли таких музеев нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.\nСчитайте в переменную название месяца.\nСоздайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;\nесли месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.\nОтсортируйте получившийся список в алфавитном порядке. \nНапечатайте элементы списка через запятую и пробел.",
        "correct_example": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nНовая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\42\\codefile.py\", line 8, in <module>\n    museum, avail = info\nValueError: too many values to unpack (expected 2)\n\n"
    },
    "703": {
        "student_solution": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(':')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "task": "Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.\n\nФОРМАТ ВВОДА\nНа первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. \nНа второй строке вводится месяц, в который Алина хочет провести выставку.\nФОРМАТ ВЫВОДА\nНазвания музеев, которые устраивают Алину (где она может провести выставку).\nНазвания должны выводиться через запятую и пробел в алфавитном порядке.\nЕсли таких музеев нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.\nСчитайте в переменную название месяца.\nСоздайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;\nесли месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.\nОтсортируйте получившийся список в алфавитном порядке. \nНапечатайте элементы списка через запятую и пробел.",
        "correct_example": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "tester_report": "Не удалось протостировать решение"
    },
    "704": {
        "student_solution": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    info = info.split(': ')\n    \n    if month in info:\n        result.append(info)\n\nprint(*sorted(result), sep = ', ')",
        "task": "Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.\n\nФОРМАТ ВВОДА\nНа первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. \nНа второй строке вводится месяц, в который Алина хочет провести выставку.\nФОРМАТ ВЫВОДА\nНазвания музеев, которые устраивают Алину (где она может провести выставку).\nНазвания должны выводиться через запятую и пробел в алфавитном порядке.\nЕсли таких музеев нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.\nСчитайте в переменную название месяца.\nСоздайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;\nесли месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.\nОтсортируйте получившийся список в алфавитном порядке. \nНапечатайте элементы списка через запятую и пробел.",
        "correct_example": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nНовая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст\nОжидаемый ответ:\nМузей изобразительных искусств, Новая Третьяковка, Пушкинский музей\nОтвет решения:\n\n\n"
    },
    "705": {
        "student_solution": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "task": "Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.\n\nФОРМАТ ВВОДА\nНа первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. \nНа второй строке вводится месяц, в который Алина хочет провести выставку.\nФОРМАТ ВЫВОДА\nНазвания музеев, которые устраивают Алину (где она может провести выставку).\nНазвания должны выводиться через запятую и пробел в алфавитном порядке.\nЕсли таких музеев нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.\nСчитайте в переменную название месяца.\nСоздайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;\nесли месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.\nОтсортируйте получившийся список в алфавитном порядке. \nНапечатайте элементы списка через запятую и пробел.",
        "correct_example": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nНовая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\42\\codefile.py\", line 10, in <module>\n    if month in avail:\nNameError: name 'avail' is not defined\n\n"
    },
    "706": {
        "student_solution": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(avail)\n\nprint(*sorted(result), sep = ', ')",
        "task": "Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.\n\nФОРМАТ ВВОДА\nНа первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. \nНа второй строке вводится месяц, в который Алина хочет провести выставку.\nФОРМАТ ВЫВОДА\nНазвания музеев, которые устраивают Алину (где она может провести выставку).\nНазвания должны выводиться через запятую и пробел в алфавитном порядке.\nЕсли таких музеев нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.\nСчитайте в переменную название месяца.\nСоздайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;\nесли месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.\nОтсортируйте получившийся список в алфавитном порядке. \nНапечатайте элементы списка через запятую и пробел.",
        "correct_example": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nНовая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст\nОжидаемый ответ:\nМузей изобразительных искусств, Новая Третьяковка, Пушкинский музей\nОтвет решения:\nавгуст, октябрь, декабрь, февраль, апрель, июнь, август, январь, март, май, август\n\n"
    },
    "707": {
        "student_solution": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.add(museum)\n\nprint(*sorted(result), sep = ', ')",
        "task": "Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.\n\nФОРМАТ ВВОДА\nНа первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. \nНа второй строке вводится месяц, в который Алина хочет провести выставку.\nФОРМАТ ВЫВОДА\nНазвания музеев, которые устраивают Алину (где она может провести выставку).\nНазвания должны выводиться через запятую и пробел в алфавитном порядке.\nЕсли таких музеев нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.\nСчитайте в переменную название месяца.\nСоздайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;\nесли месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.\nОтсортируйте получившийся список в алфавитном порядке. \nНапечатайте элементы списка через запятую и пробел.",
        "correct_example": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "tester_report": "На одном из тестов решение выполнилось с ошибкой.\nВвод теста:\nНовая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст\nЛог:\nTraceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\42\\codefile.py\", line 11, in <module>\n    result.add(museum)\nAttributeError: 'list' object has no attribute 'add'\n\n"
    },
    "708": {
        "student_solution": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month not in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "task": "Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.\n\nФОРМАТ ВВОДА\nНа первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. \nНа второй строке вводится месяц, в который Алина хочет провести выставку.\nФОРМАТ ВЫВОДА\nНазвания музеев, которые устраивают Алину (где она может провести выставку).\nНазвания должны выводиться через запятую и пробел в алфавитном порядке.\nЕсли таких музеев нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.\nСчитайте в переменную название месяца.\nСоздайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;\nесли месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.\nОтсортируйте получившийся список в алфавитном порядке. \nНапечатайте элементы списка через запятую и пробел.",
        "correct_example": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nНовая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст\nОжидаемый ответ:\nМузей изобразительных искусств, Новая Третьяковка, Пушкинский музей\nОтвет решения:\nЭрмитаж\n\n"
    },
    "709": {
        "student_solution": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(result)",
        "task": "Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.\n\nФОРМАТ ВВОДА\nНа первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. \nНа второй строке вводится месяц, в который Алина хочет провести выставку.\nФОРМАТ ВЫВОДА\nНазвания музеев, которые устраивают Алину (где она может провести выставку).\nНазвания должны выводиться через запятую и пробел в алфавитном порядке.\nЕсли таких музеев нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.\nСчитайте в переменную название месяца.\nСоздайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;\nесли месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.\nОтсортируйте получившийся список в алфавитном порядке. \nНапечатайте элементы списка через запятую и пробел.",
        "correct_example": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nНовая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст\nОжидаемый ответ:\nМузей изобразительных искусств, Новая Третьяковка, Пушкинский музей\nОтвет решения:\n['Новая Третьяковка', 'Пушкинский музей', 'Музей изобразительных искусств']\n\n"
    },
    "710": {
        "student_solution": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result))",
        "task": "Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.\n\nФОРМАТ ВВОДА\nНа первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. \nНа второй строке вводится месяц, в который Алина хочет провести выставку.\nФОРМАТ ВЫВОДА\nНазвания музеев, которые устраивают Алину (где она может провести выставку).\nНазвания должны выводиться через запятую и пробел в алфавитном порядке.\nЕсли таких музеев нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.\nСчитайте в переменную название месяца.\nСоздайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;\nесли месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.\nОтсортируйте получившийся список в алфавитном порядке. \nНапечатайте элементы списка через запятую и пробел.",
        "correct_example": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nНовая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст\nОжидаемый ответ:\nМузей изобразительных искусств, Новая Третьяковка, Пушкинский музей\nОтвет решения:\nМузей изобразительных искусств Новая Третьяковка Пушкинский музей\n\n"
    },
    "711": {
        "student_solution": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result, reverse = True), sep = ', ')",
        "task": "Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.\n\nФОРМАТ ВВОДА\nНа первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. \nНа второй строке вводится месяц, в который Алина хочет провести выставку.\nФОРМАТ ВЫВОДА\nНазвания музеев, которые устраивают Алину (где она может провести выставку).\nНазвания должны выводиться через запятую и пробел в алфавитном порядке.\nЕсли таких музеев нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.\nСчитайте в переменную название месяца.\nСоздайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;\nесли месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.\nОтсортируйте получившийся список в алфавитном порядке. \nНапечатайте элементы списка через запятую и пробел.",
        "correct_example": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nНовая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст\nОжидаемый ответ:\nМузей изобразительных искусств, Новая Третьяковка, Пушкинский музей\nОтвет решения:\nПушкинский музей, Новая Третьяковка, Музей изобразительных искусств\n\n"
    },
    "712": {
        "student_solution": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\n    print(*sorted(result), sep = ', ')",
        "task": "Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.\n\nФОРМАТ ВВОДА\nНа первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. \nНа второй строке вводится месяц, в который Алина хочет провести выставку.\nФОРМАТ ВЫВОДА\nНазвания музеев, которые устраивают Алину (где она может провести выставку).\nНазвания должны выводиться через запятую и пробел в алфавитном порядке.\nЕсли таких музеев нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.\nСчитайте в переменную название месяца.\nСоздайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;\nесли месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.\nОтсортируйте получившийся список в алфавитном порядке. \nНапечатайте элементы списка через запятую и пробел.",
        "correct_example": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nНовая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст\nОжидаемый ответ:\nМузей изобразительных искусств, Новая Третьяковка, Пушкинский музей\nОтвет решения:\nНовая Третьяковка\nНовая Третьяковка\nНовая Третьяковка, Пушкинский музей\nМузей изобразительных искусств, Новая Третьяковка, Пушкинский музей\n\n"
    },
    "713": {
        "student_solution": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ',')",
        "task": "Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.\n\nФОРМАТ ВВОДА\nНа первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. \nНа второй строке вводится месяц, в который Алина хочет провести выставку.\nФОРМАТ ВЫВОДА\nНазвания музеев, которые устраивают Алину (где она может провести выставку).\nНазвания должны выводиться через запятую и пробел в алфавитном порядке.\nЕсли таких музеев нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.\nСчитайте в переменную название месяца.\nСоздайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;\nесли месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.\nОтсортируйте получившийся список в алфавитном порядке. \nНапечатайте элементы списка через запятую и пробел.",
        "correct_example": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(': ')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')",
        "tester_report": "На одном из тестов решение вернуло неверный ответ.\nВвод теста:\nНовая Третьяковка: август, октябрь, декабрь; Эрмитаж: январь, март, май; Пушкинский музей: февраль, апрель, июнь, август; Музей изобразительных искусств: январь, март, май, август\nавгуст\nОжидаемый ответ:\nМузей изобразительных искусств, Новая Третьяковка, Пушкинский музей\nОтвет решения:\nМузей изобразительных искусств,Новая Третьяковка,Пушкинский музей\n\n"
    },
    "714": {
        "student_solution": "def success(data)\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money",
        "task": "Напишите функцию, определяющую успешна студия дизайна или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — \"победа\" или \"проигрыш\"). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.\nЕсли студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.\nЕсли хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте две переменные-счетчика — одну для подсчета строк \"победа\", другую для подсчета суммы чистой прибыли.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"победа\", то обновите переменную-счетчик побед (прибавьте 1).\nВне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).\nПроверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\ndata = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\ndef success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money\nprint(success(data))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\43\\codefile.py\", line 2\n    def success(data)\n                     ^\nSyntaxError: invalid syntax\n"
    },
    "715": {
        "student_solution": "def success():\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money",
        "task": "Напишите функцию, определяющую успешна студия дизайна или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — \"победа\" или \"проигрыш\"). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.\nЕсли студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.\nЕсли хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте две переменные-счетчика — одну для подсчета строк \"победа\", другую для подсчета суммы чистой прибыли.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"победа\", то обновите переменную-счетчик побед (прибавьте 1).\nВне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).\nПроверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\ndata = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\ndef success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money\nprint(success(data))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог: Traceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\43\\codefile.py\", line 1, in <module>\n    data = eval(input())\n  File \"<string>\", line 1\n    {\n    ^\nSyntaxError: unexpected EOF while parsing\n"
    },
    "716": {
        "student_solution": "def success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in info.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money",
        "task": "Напишите функцию, определяющую успешна студия дизайна или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — \"победа\" или \"проигрыш\"). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.\nЕсли студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.\nЕсли хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте две переменные-счетчика — одну для подсчета строк \"победа\", другую для подсчета суммы чистой прибыли.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"победа\", то обновите переменную-счетчик побед (прибавьте 1).\nВне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).\nПроверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\ndata = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\ndef success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money\nprint(success(data))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог: Traceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\43\\codefile.py\", line 1, in <module>\n    data = eval(input())\n  File \"<string>\", line 1\n    {\n    ^\nSyntaxError: unexpected EOF while parsing\n"
    },
    "717": {
        "student_solution": "def success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data:\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money",
        "task": "Напишите функцию, определяющую успешна студия дизайна или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — \"победа\" или \"проигрыш\"). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.\nЕсли студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.\nЕсли хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте две переменные-счетчика — одну для подсчета строк \"победа\", другую для подсчета суммы чистой прибыли.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"победа\", то обновите переменную-счетчик побед (прибавьте 1).\nВне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).\nПроверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\ndata = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\ndef success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money\nprint(success(data))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог: Traceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\43\\codefile.py\", line 1, in <module>\n    data = eval(input())\n  File \"<string>\", line 1\n    {\n    ^\nSyntaxError: unexpected EOF while parsing\n"
    },
    "718": {
        "student_solution": "def success(data):\n    \n    wins = 0\n    money = 0\n    \n    for key, value in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money",
        "task": "Напишите функцию, определяющую успешна студия дизайна или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — \"победа\" или \"проигрыш\"). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.\nЕсли студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.\nЕсли хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте две переменные-счетчика — одну для подсчета строк \"победа\", другую для подсчета суммы чистой прибыли.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"победа\", то обновите переменную-счетчик побед (прибавьте 1).\nВне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).\nПроверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\ndata = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\ndef success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money\nprint(success(data))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог: Traceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\43\\codefile.py\", line 1, in <module>\n    data = eval(input())\n  File \"<string>\", line 1\n    {\n    ^\nSyntaxError: unexpected EOF while parsing\n"
    },
    "719": {
        "student_solution": "def success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] = 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money",
        "task": "Напишите функцию, определяющую успешна студия дизайна или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — \"победа\" или \"проигрыш\"). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.\nЕсли студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.\nЕсли хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте две переменные-счетчика — одну для подсчета строк \"победа\", другую для подсчета суммы чистой прибыли.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"победа\", то обновите переменную-счетчик побед (прибавьте 1).\nВне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).\nПроверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\ndata = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\ndef success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money\nprint(success(data))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\43\\codefile.py\", line 8\n    if v[1] = 'победа':\n            ^\nSyntaxError: invalid syntax\n"
    },
    "720": {
        "student_solution": "def success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if k[1] == 'победа':\n            wins += 1\n        money += k[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money",
        "task": "Напишите функцию, определяющую успешна студия дизайна или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — \"победа\" или \"проигрыш\"). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.\nЕсли студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.\nЕсли хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте две переменные-счетчика — одну для подсчета строк \"победа\", другую для подсчета суммы чистой прибыли.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"победа\", то обновите переменную-счетчик побед (прибавьте 1).\nВне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).\nПроверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\ndata = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\ndef success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money\nprint(success(data))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог: Traceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\43\\codefile.py\", line 1, in <module>\n    data = eval(input())\n  File \"<string>\", line 1\n    {\n    ^\nSyntaxError: unexpected EOF while parsing\n"
    },
    "721": {
        "student_solution": "def success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[2] == 'победа':\n            wins += 1\n        money += v[1]\n            \n    if len(data) == wins:\n        return True\n        \n    return money",
        "task": "Напишите функцию, определяющую успешна студия дизайна или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — \"победа\" или \"проигрыш\"). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.\nЕсли студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.\nЕсли хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте две переменные-счетчика — одну для подсчета строк \"победа\", другую для подсчета суммы чистой прибыли.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"победа\", то обновите переменную-счетчик побед (прибавьте 1).\nВне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).\nПроверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\ndata = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\ndef success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money\nprint(success(data))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог: Traceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\43\\codefile.py\", line 1, in <module>\n    data = eval(input())\n  File \"<string>\", line 1\n    {\n    ^\nSyntaxError: unexpected EOF while parsing\n"
    },
    "722": {
        "student_solution": "def success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins =+ 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money",
        "task": "Напишите функцию, определяющую успешна студия дизайна или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — \"победа\" или \"проигрыш\"). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.\nЕсли студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.\nЕсли хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте две переменные-счетчика — одну для подсчета строк \"победа\", другую для подсчета суммы чистой прибыли.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"победа\", то обновите переменную-счетчик побед (прибавьте 1).\nВне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).\nПроверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\ndata = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\ndef success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money\nprint(success(data))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог: Traceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\43\\codefile.py\", line 1, in <module>\n    data = eval(input())\n  File \"<string>\", line 1\n    {\n    ^\nSyntaxError: unexpected EOF while parsing\n"
    },
    "723": {
        "student_solution": "def success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \nreturn money",
        "task": "Напишите функцию, определяющую успешна студия дизайна или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — \"победа\" или \"проигрыш\"). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.\nЕсли студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.\nЕсли хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте две переменные-счетчика — одну для подсчета строк \"победа\", другую для подсчета суммы чистой прибыли.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"победа\", то обновите переменную-счетчик побед (прибавьте 1).\nВне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).\nПроверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\ndata = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\ndef success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money\nprint(success(data))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог:   File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\43\\codefile.py\", line 15\n    return money\n    ^\nSyntaxError: 'return' outside function\n"
    },
    "724": {
        "student_solution": "def success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) != wins:\n        return True\n        \n    return money",
        "task": "Напишите функцию, определяющую успешна студия дизайна или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — \"победа\" или \"проигрыш\"). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.\nЕсли студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.\nЕсли хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте две переменные-счетчика — одну для подсчета строк \"победа\", другую для подсчета суммы чистой прибыли.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"победа\", то обновите переменную-счетчик побед (прибавьте 1).\nВне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).\nПроверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\ndata = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\ndef success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money\nprint(success(data))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог: Traceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\43\\codefile.py\", line 1, in <module>\n    data = eval(input())\n  File \"<string>\", line 1\n    {\n    ^\nSyntaxError: unexpected EOF while parsing\n"
    },
    "725": {
        "student_solution": "def success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return money\n        \n    return True",
        "task": "Напишите функцию, определяющую успешна студия дизайна или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — \"победа\" или \"проигрыш\"). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.\nЕсли студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.\nЕсли хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте две переменные-счетчика — одну для подсчета строк \"победа\", другую для подсчета суммы чистой прибыли.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"победа\", то обновите переменную-счетчик побед (прибавьте 1).\nВне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).\nПроверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\ndata = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\ndef success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money\nprint(success(data))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог: Traceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\43\\codefile.py\", line 1, in <module>\n    data = eval(input())\n  File \"<string>\", line 1\n    {\n    ^\nSyntaxError: unexpected EOF while parsing\n"
    },
    "726": {
        "student_solution": "def success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return [True, money]\n        \n    return False",
        "task": "Напишите функцию, определяющую успешна студия дизайна или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — \"победа\" или \"проигрыш\"). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.\nЕсли студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.\nЕсли хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте две переменные-счетчика — одну для подсчета строк \"победа\", другую для подсчета суммы чистой прибыли.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"победа\", то обновите переменную-счетчик побед (прибавьте 1).\nВне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).\nПроверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\ndata = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\ndef success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money\nprint(success(data))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог: Traceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\43\\codefile.py\", line 1, in <module>\n    data = eval(input())\n  File \"<string>\", line 1\n    {\n    ^\nSyntaxError: unexpected EOF while parsing\n"
    },
    "727": {
        "student_solution": "def success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return [False, money]",
        "task": "Напишите функцию, определяющую успешна студия дизайна или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — \"победа\" или \"проигрыш\"). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.\nЕсли студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.\nЕсли хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте две переменные-счетчика — одну для подсчета строк \"победа\", другую для подсчета суммы чистой прибыли.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"победа\", то обновите переменную-счетчик побед (прибавьте 1).\nВне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).\nПроверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\ndata = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\ndef success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money\nprint(success(data))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог: Traceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\43\\codefile.py\", line 1, in <module>\n    data = eval(input())\n  File \"<string>\", line 1\n    {\n    ^\nSyntaxError: unexpected EOF while parsing\n"
    },
    "728": {
        "student_solution": "def success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return wins",
        "task": "Напишите функцию, определяющую успешна студия дизайна или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — \"победа\" или \"проигрыш\"). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.\nЕсли студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.\nЕсли хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте две переменные-счетчика — одну для подсчета строк \"победа\", другую для подсчета суммы чистой прибыли.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"победа\", то обновите переменную-счетчик побед (прибавьте 1).\nВне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).\nПроверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\ndata = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\ndef success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money\nprint(success(data))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог: Traceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\43\\codefile.py\", line 1, in <module>\n    data = eval(input())\n  File \"<string>\", line 1\n    {\n    ^\nSyntaxError: unexpected EOF while parsing\n"
    },
    "729": {
        "student_solution": "def success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        print(True)\n        \n    print(money)",
        "task": "Напишите функцию, определяющую успешна студия дизайна или нет. \n\nТРЕБУЕМАЯ ФУНКЦИЯ \nФункция success, принимающая на вход словарь, ключи в котором — отчетные года (целые числа), а значения — кортежи с двумя элементами (целым числом — чистая прибыль за год; и строкой о выигрыше высшей премии дизайна — \"победа\" или \"проигрыш\"). Гарантируется, что словарь содержит информацию минимум об одном отчетном годе.\nЕсли студия дизайна во все годы выигрывала премию, то функция должна возвращать логическую константу True.\nЕсли хотя бы в один год студия не выиграла премию, то функция возвращает сумму чистой прибыли за все отчетные годы.\nВАЖНО! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nОпределите функцию и аргумент, с которым она работает.\nЗадайте две переменные-счетчика — одну для подсчета строк \"победа\", другую для подсчета суммы чистой прибыли.\nОбратитесь к парам ключ-значение в переданном функции словаре. Если первый по индексу элемент значения (кортежа) принимает значение \"победа\", то обновите переменную-счетчик побед (прибавьте 1).\nВне зависимости от победы или проигрыша обновите вторую переменную-счетчик (прибавьте нулевой по индексу элемент значения (кортежа)).\nПроверьте, что количество ключей словаря совпадает со значением первой переменной-счетчика, и если да, то пусть функция вернет логическую константу True; иначе пусть функция вернет значение второй-переменной счетчика (сумма чистой прибыли).",
        "correct_example": "import os.path as osp\ncd = osp.dirname(__file__)\ndata = eval(open(osp.join(cd, 'input.txt'), encoding='utf-8').read())\ndef success(data):\n    \n    wins = 0\n    money = 0\n    \n    for k, v in data.items():\n        if v[1] == 'победа':\n            wins += 1\n        money += v[0]\n            \n    if len(data) == wins:\n        return True\n        \n    return money\nprint(success(data))",
        "tester_report": "Ошибка в открытых и скрытых тестах. В коде решения присутствует синтаксическая ошибка. Лог: Traceback (most recent call last):\n  File \"C:\\Users\\user\\Desktop\\hack\\HSE AI Assistant hack\\pocket-tutor-py\\cache\\43\\codefile.py\", line 1, in <module>\n    data = eval(input())\n  File \"<string>\", line 1\n    {\n    ^\nSyntaxError: unexpected EOF while parsing\n"
    }
}