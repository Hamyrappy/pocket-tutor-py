[{"type": "Correct solution", "about": {"data_type": "train", "id": 26, "student_solution": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif not(color in cite_project):\n    print(True)\nelse:\n    print(False)", "task": "Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию логотипа, но не в проекте по созданию дизайна сайта:\n\nДаны два списка logo_project и cite_project с кодами используемых цветов (строки).\nВ переменную color считывается код цвета (строка). Этот код уже написан.\nПрограмма должна проверять, что код цвета color есть только в списке logo_project, и если да, то печатать True. \nВ остальных случаях программа печатает False. ", "task_id": 1}}, {"type": "Correct solution", "about": {"data_type": "train", "id": 476, "student_solution": "def count_letters(langs, letters):\n    langs = langs.split(', ')\n    letters = list(map(int, letters.split(', ')))\n    mn = min(letters)\n    ind = letters.index(mn)\n    return langs[ind]", "task": "Витя хочет определить язык, алфавит которого состоит из минимального количества букв. Напишите функцию, которая ему в этом поможет.\n\nОпределите функцию count_letters, которая принимает на вход два аргумента:\nстроку, где через запятую и пробел перечислены языки;\nстроку, где через запятую и пробел перечислены числа, обозначающие количество букв в алфавите каждого языка;\nГарантируется, что языки и количество букв не повторяются. \nФункция должна возвращать строку — название языка, в алфавите которого минимальное количество букв. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.", "task_id": 30}}, {"type": "Missing files", "about": {"data_type": "train", "task": "Галина анализирует стоимость услуг дизайнеров для ее сайта, которые собраны в файле формата csv. Напишите программу, которая выводит все строки с услугами интересующего дизайнера, а стоимость каждой услуги не превышает 5000 рублей.\n\nПрограмма должна открывать структурированный текстовый файл offers.csv, в кодировке utf-8, где на каждой строке записана следующая информация об услугах: название услуги, имя дизайнера, стоимость услуги. Например, строка \"Создание лендинга, Анастасия Иванова, 12000 р.\" означает, что за создание лендинга дизайнер Анастасия Иванова запрашивает 12000 рублей.\nГарантируется, что стоимость услуги всегда записана в формате \"<целое число> р.\".\nРазделителями данных в файле служат запятые с пробелом.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — имя дизайнера. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, в которых есть только услуги интересующего дизайнера, а стоимость каждой услуги не превышает 5000 рублей (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл offers.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл offers.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.", "task_id": 43, "comment": "add csv"}}, {"type": "Missing files", "about": {"data_type": "train", "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным в определенный период проектам, стоимость которых была не более 500 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — год.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не позднее, чем в указанном году, со стоимостью не более 500. тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.", "task_id": 7, "comment": "add csv"}}, {"type": "Correct solution", "about": {"data_type": "train", "id": 293, "student_solution": "def designer (designers, sizes, towns):\n    sizes = list(map(int, sizes))\n    lst_of_des = []\n    lst_of_siz = []\n    for i in range(len(towns)):\n        if towns[i] == \"Москва\":\n            lst_of_des.append(designers[i])\n            lst_of_siz.append(sizes[i])\n    \n    return lst_of_des[lst_of_siz.index(min(lst_of_siz))]  ", "task": "Напишите функцию, определяющую дизайнера, который работает над самым сложным проектом в городе Москва.\n\nОпределите функцию designer, которая принимает на вход три списка:\nв первой списке перечислены фамилии дизайнеров;\nво втором списке перечислены размеры помещений (в кв. м.) (строки), для которых эти дизайнеры создают проекты интерьера соответственно.\nв третьем списке перечислены города, в которых располагаются помещения.\nГарантируется, что фамилии дизайнеров не повторяются. При этом размеры помещений могут повторяться.\nСамым сложным считается проект, в котором площадь помещения максимальна. Гарантируется, что такой проект только один.\nФункция должна возвращать фамилию дизайнера, который работает над самым сложным проектом в городе Москва. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.", "task_id": 18}}, {"type": "Correct solution", "about": {"data_type": "train", "id": 94, "student_solution": "def designer (designers, sizes, towns):\n    lst_of_des = []\n    lst_of_siz = []\n    for i in range(len(towns)):\n        if towns[i] != \"Москва\" and towns[i] != \"Санкт-Петербург\":\n            lst_of_des.append(designers[i])\n            lst_of_siz.append(sizes[i])\n    \n    return lst_of_des[lst_of_siz.index(min(lst_of_siz))]", "task": "Напишите функцию, определяющую дизайнера, который работает над самым легким проектом.\n\nОпределите функцию designer, которая принимает на вход три списка:\nв первом списке перечислены фамилии дизайнеров;\nво втором списке перечислены размеры помещений (в кв. м.) (строки), для которых эти дизайнеры создают проекты интерьера соответственно.\nв третьем списке перечислены города, в которых располагаются помещения.\nГарантируется, что фамилии дизайнеров не повторяются. При этом размеры помещений могут повторяться.\nСамым легким считается проект, в котором площадь помещения минимальна и город, в котором находится помещение, над которым работает дизайнер, не Москва или Санкт-Петербург. Гарантируется, что такой проект только один.\nФункция должна возвращать фамилию дизайнера, который работает над самым легким проектом. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.", "task_id": 6}}, {"type": "Missing files", "about": {"data_type": "train", "task": "Лолита изучает, какие студии дизайна чаще всего дают комментарии в ее любимом журнале. Помогите определить студии, встретившиеся в тексте более двух раз. Гарантируется, что в тексте только названия сервисов написаны в кавычках «». \n\nФОРМАТ ВВОДА\nТекстовый файл designtalks.txt, в котором записан текст из журнала. \nГарантируется, что пустых строк в файле нет.\nГарантируется, что в файле будет упоминание хотя бы одной студии.\nТакже дана строка punctuation с символами, которые могут встречаться в тексте — необходимо будет очистить от них текст.\nФОРМАТ ВЫВОДА\nСтудии дизайна, встретившиеся в тексте более двух раз.\nСтудии должны быть записаны в обратном алфавитном порядке через запятую и пробел.\nДОПОЛНИТЕЛЬНО\nВ открытом тесте используется файл designtalks.txt. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСоздайте пустой словарь, в который будете записывать слова и их количество.\nОткройте файл в режиме чтения в кодировке utf-8.\nОбратитесь к каждой строке в файле и выполните следующие действия:\nуберите невидимые символы в конце строки (символ перехода на новую строку);\nобратитесь к каждому символу в строке punctuation и используйте его для замены на пустую строку в строке файла;\nразбейте строку по разделителю, в результате получите список;\nобратитесь к каждому элементу в получившемся списке. Если первый символ — это кавычка «, тогда это студия дизайна, и нужно проверить:\nесли этого названия еще нет в словаре из п.1, то нужно его добавить в качестве ключа, присвоив значение 1.\nесли такое название уже есть в словаре из п.1, то нужно увеличить его значение на 1.\nПосле цикла создайте пустой список — в него нужно будет добавить те названия, значение которых в словаре более 2.\nОбратитесь к парам ключ-значение в словаре: если значение строго больше 2, то добавьте ключ в список из п.4.\nОтсортируйте список в обратном алфавитном порядке и напечатайте его элементы через запятую и пробел.", "task_id": 47, "comment": "add txt"}}, {"type": "Correct solution", "about": {"data_type": "train", "id": 513, "student_solution": "ch1 = input()\nch2 = input()\nch3 = input()\n\nres = f'{ch1}/{ch2}/{ch3}'.split('/')\n\ncounter = 10000000\n\nfor item in res:\n    item = int(item.split(': ')[1].split()[0])\n\n    if item <= counter:\n        counter = item\n    \nprint(counter)", "task": "Мария хочет проверить, какое минимальное количество слов встречается в трех разделах книги. Напишите программу, которая поможет девушке. \n\nФОРМАТ ВВОДА \nВводятся три строки (за каждый раздел книги) в формате '<название главы>: <количество слов> слов'.  Между собой информация о главах разделена прямым слэшем (\"/\"). \nГарантируется, что каждая строка состоит из информации минимум об одной главе.\nФОРМАТ ВЫВОДА \nЦелое число — минимальное число слов, встречающееся в трех разделах книги. \nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте прямой слэш. Сохраните результат в новую переменную.\nСоздайте переменную-счетчик для определения минимального количества слов.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите количество слов (не забудьте преобразовать в целое число). Если данное значение числа слов меньше переменной-счетчика, то обновите переменную-счетчик.\nНапечатайте значение переменной-счетчика.", "task_id": 32}}, {"type": "Missing files", "about": {"data_type": "train", "task": "Роман изучает свой отчет по итогам поездки в Англию, где он описывал различные диалекты. Помогите определить диалекты английского языка, которые упоминаются ровно 2 раза.\n\nФОРМАТ ВВОДА\nТекстовый файл dialects.txt, в котором записан отчет. Гарантируется, что в отчете только названия диалектов всегда записаны с большой буквы. При этом сами диалекты должны учитываться вне зависимости от регистра (например, \"Кардифф\" и \"КАРДиф\" должны считаться, как один диалект)\nГарантируется, что пустых строк в файле нет.\nГарантируется, что в файле будет упоминание хотя бы одного диалекта.\nТакже дана строка punctuation с символами, которые могут встречаться в тексте — необходимо будет очистить от них текст.\nФОРМАТ ВЫВОДА\nНазвания диалектов, которые упоминаются в отчете ровно два раза. \nНазвания должны быть записаны в нижнем регистре в обратном алфавитном порядке через точку с запятой и пробел.\nДОПОЛНИТЕЛЬНО\nВ открытом тесте используется файл dialects.txt. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСоздайте пустой словарь, в который будете записывать диалекты и число их упоминаний.\nОткройте файл в режиме чтения в кодировке utf-8.\nОбратитесь к каждой строке в файле и выполните следующие действия:\nуберите невидимые символы в конце строки (символ перехода на новую строку);\nобратитесь к каждому символу в строке punctuation и используйте его для замены на пустую строку в строке файла;\nразбейте строку по разделителю, в результате получите список;\nобратитесь к каждому элементу в получившемся списке: если первая его буква — заглавная, тогда этот диалект и нужно проверить (не забудьте привести все буквы в диалекте к одному регистру):\nесли этого диалекта еще нет в словаре из п.1, то нужно его добавить в качестве ключа, присвоив значение 1.\nесли такой диалект уже есть в словаре из п.1, то нужно увеличить его значение на 1.\nПосле цикла создайте пустой список — в него нужно будет добавить названия тех диалектов, значение которых в словаре ровно 2.\nОбратитесь к парам ключ-значение в словаре: если значение равно 2, то добавьте ключ в список из п.4.\nОтсортируйте список в обратном алфавиту порядке и напечатайте его элементы через точку с запятой и пробел.", "task_id": 35, "comment": "add txt"}}, {"type": "Missing files", "about": {"data_type": "train", "task": "Роман изучает отчет по объекту, где упоминаются различные цвета, которые использовались в проекте. Помогите определить цвета, которые использовались не менее двух раз.\n\nФОРМАТ ВВОДА\nТекстовый файл report.txt, в котором записан отчет по объекту. Гарантируется, что в тексте только названия цветов начинаются с хэштега (\"#\"). \nГарантируется, что пустых строк в файле нет.\nГарантируется, что в файле будет упоминание хотя бы одного цвета.\nТакже дана строка punctuation с символами, которые могут встречаться в тексте — необходимо будет очистить от них текст.\nФОРМАТ ВЫВОДА\nНазвания цветов, которые использовались в проекте не менее двух раз. \nНазвания должны быть записаны в обратном алфавитном порядке через точку с запятой и пробел.\nДОПОЛНИТЕЛЬНО\nВ открытом тесте используется файл report.txt  Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСоздайте пустой словарь, в который будете записывать цвета и то, сколько раз их использовали в проекте.\nОткройте файл в режиме чтения в кодировке utf-8.\nОбратитесь к каждой строке в файле и выполните следующие действия:\nуберите невидимые символы в конце строки (символ перехода на новую строку);\nобратитесь к каждому символу в строке punctuation и используйте его для замены на пустую строку в строке файла;\nразбейте строку по разделителю, в результате получите список;\nобратитесь к каждому элементу в получившемся списке: если первый его элемент — хэштег, тогда это цвет и нужно проверить:\nесли этого цвета еще нет в словаре из п.1, то нужно его добавить в качестве ключа, присвоив значение 1.\nесли такой цвет уже есть в словаре из п.1, то нужно увеличить его значение на 1.\nПосле цикла создайте пустой список — в него нужно будет добавить названия тех цветов, значение которых в словаре больше 1.\nОбратитесь к парам ключ-значение в словаре: если значение больше или равно  2, то добавьте ключ в список из п.4.\nОтсортируйте список в обратном алфавиту порядке и напечатайте его элементы через точку с запятой и пробел.", "task_id": 23, "comment": "add txt"}}, {"type": "Missing files", "about": {"data_type": "test", "task": "Ксения анализирует реализованные дизайн-проекты, которые собраны в файле формата csv. Напишите программу, которая выводит все строки, соответствующие реализованным за определенный срок проектам, стоимость которых была не более 250 тыс. руб..\n\nПрограмма должна открывать структурированный текстовый файл projects_file.csv, в кодировке utf-8, где на каждой строке записана следующая информация о дизайн-проекте: год, стоимость проекта, количество недель, за сколько был реализован проект. Например, строка \"2019,200 тыс. руб.,10 недель\" означает, что в 2019 году проект стоимостью 200 тыс. руб. был реализован за 10 недель.\nГарантируется, что стоимость реализованного проекта всегда записана в формате \"<целое число> тыс. руб.\".\nГарантируется, что срок реализации проекта всегда записан в формате \"<целое число> недель\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится строка — количество недель.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют проектам, реализованным не более, чем за указанное количество недель, со стоимостью не более 250 тыс. руб. (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл projects_file.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл projects_file.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.", "task_id": 19, "comment": "add csv"}}, {"type": "Correct solution", "about": {"data_type": "test", "id": 328, "student_solution": "house1 = input()\nhouse2 = input()\nhouse3 = input()\n\nres = '; '.join([house1, house2, house3] )\nmax_pr = 0 \n\nres = res.split('; ')\nfor item in res:\n    k = int(item.split(': ')[1].split()[0])\n    if k >= max_pr:\n        max_pr = k\n\n    \nprint(max_pr)", "task": "Алиса хочет проверить, какое максимальное количество денег потратила студия дизайна на покупку предметов интерьера для трех домов. Напишите программу, которая поможет девушке. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого дома) в формате '<название предмета интерьера>: <цена> руб.'.  Между собой информация о предметах интерьера разделена точкой запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одном предмете интерьера.\nФОРМАТ ВЫВОДА \nВещественное число — максимальная цена среди всех стоимостей предметов интерьера, которые были куплены студией дизайна. \nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте точку запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную-счетчик для определения максимальной суммы трат.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки вытащите цену (не забудьте преобразовать в целое число), присвойте переменной-счетчику значение новой цены, если эта цена больше, чем предыдущее значение переменной-счетчика.\nНапечатайте значение переменной-счетчика.", "task_id": 20}}, {"type": "Missing files", "about": {"data_type": "test", "task": "Роман анализирует информаицю о переведенных текстах, которая собрана в файле формата csv. Напишите программу, которая выводит все строки, соответствующие текстам, написанным на французском языке, которые были переведены не позднее, чем в 2015 году, а количество слов в которых не менее определенного значения.\n\nПрограмма должна открывать структурированный текстовый файл info_texts.csv, в кодировке utf-8, где на каждой строке записана следующая информация о переведенном тексте: год, оригинальный язык текста, язык перевода текста, количество слов в тексте. Например, строка \"1993,английский,немецкий,6000 слов\" означает, что в 1993 году текст, написанный на английском языке, был переведен на немецкий, и объем текста составил 6000 слов.\nГарантируется, что объем текста всегда записан \"<целое число> слов\".\nРазделителями данных в файле служат запятые.\nГарантируется, что в файле есть как минимум одна строка с данными. \nС клавиатуры вводится число — количество слов. Этот код уже написан.\nПрограмма должна выводить строки из оригинального файла, которые соответствуют переведенным не позднее, чем в 2015 году текстам, оригинальный язык которых — это французский, и объем которых составляет не менее указанного количества слов (не забудьте удалить символы конца строки!).\nЕсли подходящих под условие строк в файле нет, то программа ничего не выводит.\nДОПОЛНИТЕЛЬНО\nВаше решение будет проверяться на закрытых тестах. Ваш код должен считывать файл info_texts.csv без дополнительных указаний (например, пути к файлу на вашем компьютере).\nВ открытом тесте используется файл info_texts.csv. Вы можете скачать его и проверить свое решение локально.\nВ примере в первой колонке отображается номер теста (0 — открытый тест), считывать это число или использовать его в вашем решении не нужно.", "task_id": 31, "comment": "add csv"}}, {"type": "Correct solution", "about": {"data_type": "test", "id": 524, "student_solution": "data = input().split('/ ')\nskill = input()\n\nresult = []\nfor comp in data:\n    comp, skills = comp.split(':')\n    \n    if skill in skills:\n        result.append(comp)\n\nprint(*sorted(result, reverse=True), sep = '; ')", "task": "Игорь хочет пойти работать по профессии и смотрит, какие навыки необходимы для работы на определенной должности. Напишите программу, которая поможет Игорь определить должности, на которые его могут взять. \n\nФОРМАТ ВВОДА\nНа первой строке через прямой слэш (\"/\") и пробел вводится информация о должностях и навыках в формате '<название должностии>: <названия навыков через запятую и пробел>'. Гарантируется, что строка содержит информацию минимум об одной должности. \nНа второй строке вводится навык, которым владеет Игорь. \nФОРМАТ ВЫВОДА\nНазвания должностей, на которые Игоря могут взять.\nНазвания должны выводиться через точку с запятой и пробел в обратном алфавитном порядке.\nЕсли таких должностей нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с должностями и навыками, сразу разделите по разделителю и получите список.\nСчитайте в переменную название навыка.\nСоздайте пустой список, в который будете добавлять название должности, если на нее могут взять Игоря.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название должности в одну переменную, а названия навыков — в другую переменную;\nесли навык Игоря (переменная из п.2) есть в списке с требуемыми навыками для должности, то добавьте название должности в список из п.3.\nОтсортируйте получившийся список в обратном алфавитном порядке. \nНапечатайте элементы списка через точку с запятой и пробел.", "task_id": 33}}, {"type": "Correct solution", "about": {"data_type": "test", "id": 661, "student_solution": "def best_agencies(names, count):\n    names = names.split(', ')\n    count = list(map(int, count.split(', ')))\n    \n    agency = []\n    \n    for idx in range(len(names)):\n        if count[idx] > 500:\n            agency.append(names[idx])\n    \n    return sorted(agency)", "task": "Напишите функцию, определяющую агентства с допустимым количеством положительных отзывов.\n\nОпределите функцию best_agencies, которая принимает на вход две строки:\nв первой строке через запятую и пробел перечислены названия агентств;\nво второй строке через запятую и пробел перечислено количество положительных отзывов (целые числа) у каждого агентства.\nГарантируется, что названия агентств не повторяются.\nФункция должна находить агентства, у которых не менее 500 положительных отзывов, и возвращать список с названиями таких агентств в алфавитном порядке. \nГарантируется, что в данных есть как минимум одно агентство, удовлетворяющее этому условию. \nВажно! В этой задаче вы только определяете функцию, вызывать ее и считывать значения не нужно, это произойдет автоматически при проверке.", "task_id": 42}}, {"type": "Correct solution", "about": {"data_type": "test", "id": 686, "student_solution": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(',')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(': ')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])", "task": "Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одной выставке.\nФОРМАТ ВЫВОДА \nСписок из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную для сохранения количества отзывов для каждой выставки.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.\nОтсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.", "task_id": 44}}, {"type": "Correct solution", "about": {"data_type": "test", "id": 690, "student_solution": "e1 = input()\ne2 = input()\ne3 = input()\n\nres = f'{e1}, {e2}, {e3}'.split(', ')\ncnt = []\n\nfor exh in res:\n    review = int(exh.split(':')[1])\n    cnt.append(int(review))\n    \nprint(sorted(cnt, reverse=True)[:2])", "task": "Анна хочет узнать топ-2 выставки по количеству отзывов среди всех ее выставок в трех музеях. Напишите программу, которая поможет автору. \n\nФОРМАТ ВВОДА \nВводятся три строки (для каждого музея) в формате '<название выставки>: <количество отзывов>'. Между собой информация о выставках разделена запятой с пробелом. \nГарантируется, что каждая строка состоит из информации минимум об одной выставке.\nФОРМАТ ВЫВОДА \nСписок из двух целых чисел — количество отзывов у двух самых популярных выставок. Числа должны идти от наибольшего к наименьшему.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте строки в три разных переменных. Затем объедините эти строки в одну, в качестве разделителя используйте запятую и пробел. Сохраните результат в новую переменную.\nСоздайте переменную для сохранения количества отзывов для каждой выставки.\nРазбейте созданную в п.1 переменную по разделителю и обратитесь к каждому элементу полученного списка — из каждой строки возьмите количество отзывов (не забудьте преобразовать в целое число) и добавьте их к списку из п. 2.\nОтсортируйте список от наибольшего к наименьшему и напечатайте срез из первых двух элементов.", "task_id": 44}}, {"type": "Correct solution", "about": {"data_type": "test", "id": 703, "student_solution": "data = input().split('; ')\nmonth = input()\n\nresult = []\n\nfor info in data:\n    museum, avail = info.split(':')\n    \n    if month in avail:\n        result.append(museum)\n\nprint(*sorted(result), sep = ', ')", "task": "Алина планирует свою выставку и смотрит, в какие месяцы музеи готовы предложить ей помещение. Напишите программу, которая поможет Алине найти музей для выставки.\n\nФОРМАТ ВВОДА\nНа первой строке через точку с запятой и пробел вводится информация о музеях и месяцах, в которые они могут провести выставку в формате '<название музея>: <месяцы через точку с запятой и пробел>'. Гарантируется, что строка содержит информацию минимум об одном музее. \nНа второй строке вводится месяц, в который Алина хочет провести выставку.\nФОРМАТ ВЫВОДА\nНазвания музеев, которые устраивают Алину (где она может провести выставку).\nНазвания должны выводиться через запятую и пробел в алфавитном порядке.\nЕсли таких музеев нет, программа ничего не выводит.\nАЛГОРИТМ РЕШЕНИЯ \nЭто один из возможных алгоритмов решения задачи. Вы можете воспользоваться им в качестве подсказки или решить задачу любым другим удобным для вас способом.\nСчитайте в переменную строку с названиями музеев и месяцами, сразу разделите по разделителю и получите список.\nСчитайте в переменную название месяца.\nСоздайте пустой список, в который будете добавлять название музея, если Алина сможет провести там выставку в выбранный ей месяц.\nОбратитесь к каждому элементу из списка, созданного в п.1:\nразбейте его (строку) по разделителю и сохраните название музея в одну переменную, а месяцы — в другую переменную;\nесли месяц Алины (переменная из п.2) есть в месяцах музея, то добавьте название музея в список из п.3.\nОтсортируйте получившийся список в алфавитном порядке. \nНапечатайте элементы списка через запятую и пробел.", "task_id": 45}}, {"type": "Correct solution", "about": {"data_type": "train", "id": 444, "student_solution": "sentence = input()\n\nres = 0\nfor info in sentence.split():\n    if info.isalpha() and info.endswith('ук'):      \n        res += 1\n    elif info.isalpha() and 'аз' in info:\n        res += 1\n        \nif res == 0:\n    res = \"Тюркизмов в тексте нет\"\n\nprint(res)", "task": "Реализуйте программу, которая напечатает количество тюркизмов, встречающихся в тексте: \n\nВ переменную sentence считывается текст. Этот код уже написан.\nПрограмма проверяет, есть ли в этом тексте тюркизмы. Гарантируется, что тюркизмы — это всегда слова, которые отделены от другого текста пробелом, состоящие только из букв, в которых встречается буквосочетание \"аз\" или которые заканчиваются на буквосочетание \"ук\". \nГарантируется, что тюркизмы не повторяются.\nВ конце программа печатает количество всех тюркизмов, встречающихся в тексте. \nЕсли названий тюркизмов в тексте нет, программа печатает строку \"Тюркизмов в тексте нет\".", "task_id": 27}}, {"type": "Correct solution", "about": {"data_type": "train", "id": 449, "student_solution": "course = set(input().split(', '))\nfavorite = set(input().split(', '))\nfree = set(input().split(', '))\n\nprint(*sorted(free & course, reverse = True), sep = '; ')", "task": "Студент хочет определить языки, которые он будет изучать на втором курсе. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную course считывается список языков, которые изучаются в рамках учебной программы. Этот код уже написан.\nВ переменную favorite считывается список языков, которые нравятся студенту. Этот код уже написан.\nВ переменную free считывается список языков, которые можно изучать в университете бесплатно. Этот код уже написан.\nГарантируется, что языки в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку с запятой и пробел языки, которые изучаются в рамках программы, нравятся студенту и их можно изучать в университете бесплатно.\nЯзыки должны быть отсортированы в обратном алфавиту порядке.\nЕсли таких языков нет, программа ничего не выводит. ", "task_id": 28}}, {"type": "Correct solution", "about": {"data_type": "test", "id": 69, "student_solution": "allowed_colors = set(input().split(', '))\nfavorite_colors = set(input().split(', '))\nused_colors = set(input().split(', '))\n\nprint(*sorted(allowed_colors & favorite_colors, reverse = False), sep = '; ', end = '!')", "task": "Дизайнер К. хочет подобрать цветовую гамму для нового проекта. Реализуйте программу, которая поможет ему сделать выбор:\n\nВ переменную allowed_colors считывается список разрешенных цветов для использования в проекте. Этот код уже написан.\nВ переменную favorite_colors считывается список любимых цветов дизайнера. Этот код уже написан.\nВ переменную used_colors считывается список цветов, которые дизайнер уже использовал в предыдущих проектах. Этот код уже написан.\nГарантируется, что цвета в каждом списке уникальны.\nЛюбой список может оказаться пустым.\nПрограмма выводит через точку запятой с пробелом цвета, которые разрешены для использования в проекте, уже были использованы дизайнером в предыдущих работах и являются любимыми цветами дизайнера.\nЦвета должны быть отсортированы в алфавитном порядке. В конце вывода должен быть напечатан восклицательный знак.\nЕсли таких цветов нет, программа выводит только восклицательный знак. ", "task_id": 4}}, {"type": "Correct solution", "about": {"data_type": "test", "id": 203, "student_solution": "duration  = int(input())\nmoney = input()\n\n# ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')", "task": "Реализуйте программу, которая напечатает стоимость и срок реализации проекта: \n\nВ переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. \nВажно! В коде обязательно нужно использовать f-строку!", "task_id": 12}}, {"type": "Correct solution", "about": {"data_type": "test", "id": 204, "student_solution": "duration  = input()\nmoney = int(input())\n\n# ваш код ниже\n\nprint(f'Реализация проекта будет стоить {money} тыс. руб. Срок реализации проекта {duration} недель.')", "task": "Реализуйте программу, которая напечатает стоимость и срок реализации проекта: \n\nВ переменную duration считывается срок реализации проекта в неделях(целое число). Этот код уже написан.\nВ переменную money считывается стоимость реализации проекта в тысячах (целое число). Этот код уже написан.\nПрограмма должна вывести фразу вида 'Реализация проекта будет стоить <стоимость> тыс. руб. Срок реализации проекта - <срок реализации в неделях> недель.'. \nВажно! В коде обязательно нужно использовать f-строку!", "task_id": 12}}, {"type": "Correct solution", "about": {"data_type": "test", "id": 219, "student_solution": "logo_project = ['#a7a8f0', '#a7f0ca', '#b3b4e4', '#e4b3cd', '#e4e3b3', '#c0ced7']\ncite_project = ['#e4e3b3', '#a7a8f0', '#ccb1e6', '#b4f99e', '#f9b59e', '#c0ced7']\n\ncolor = input()\n\nif color not in logo_project:\n    print(True)\nelse:\n    print(False)", "task": "Реализуйте программу, которая проверит, что цвет используется только в проекте по созданию дизайна сайта, но не в проекте по созданию логотипа:\n\nДаны два списка logo_project и cite_project с кодами используемых цветов (строки).\nВ переменную color считывается код цвета (строка). Этот код уже написан.\nПрограмма должна проверять, что код цвета color есть только в списке cite_project, и если да, то печатать True. \nВ остальных случаях программа печатает False. ", "task_id": 13}}, {"type": "Correct solution", "about": {"data_type": "test", "id": 593, "student_solution": "order = input()\ntime = int(input())\n\nwork = 'Берем заказ в работу'\nreject = 'Отказываем заказчику'\n\n# ваш код\n\nif order.startswith('Лендинг') and time < 10:\n    print(work)\nelse:\n    print(reject)", "task": "Реализуйте следующую программу:\n\nВ переменную order считывается строка вида \"<заказ>;<стоимость в рублях>;<компания-заказчик>\". Этот код уже написан.\nВ переменную time считывается целое число, обозначающее количество дней для выполнения заказа. Этот код уже написан.\nПрограмма должна проверять, что на выполнение заказа отведено не более 10 дней, а также что заказ начинается со слова \"Лендинг\".\nЕсли условия выполняются, программа печатает фразу \"Берем заказ в работу\". Эта фраза сохранена для вас в переменную work.\nВ остальных случаях программа печатает фразу \"Отказываем заказчику\". Эта строка сохранена для вас в переменную reject.", "task_id": 37}}]